/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'unversioned.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.openshift.restclient.api;

import com.openshift.restclient.ApiException;
import com.openshift.restclient.model.V1Scale;
import com.openshift.restclient.model.UnversionedPatch;
import com.openshift.restclient.model.V1HorizontalPodAutoscalerList;
import com.openshift.restclient.model.V1HorizontalPodAutoscaler;
import com.openshift.restclient.model.UnversionedStatus;
import com.openshift.restclient.model.V1DeleteOptions;
import com.openshift.restclient.model.VersionedEvent;
import com.openshift.restclient.model.V1JobList;
import com.openshift.restclient.model.V1Job;
import com.openshift.restclient.model.V2alpha1JobList;
import com.openshift.restclient.model.V2alpha1Job;
import com.openshift.restclient.model.V1beta1HorizontalPodAutoscalerList;
import com.openshift.restclient.model.V1beta1HorizontalPodAutoscaler;
import com.openshift.restclient.model.V1beta1JobList;
import com.openshift.restclient.model.V1beta1Job;
import com.openshift.restclient.model.V1beta1Scale;
import com.openshift.restclient.model.V1Binding;
import com.openshift.restclient.model.V1BuildConfig;
import com.openshift.restclient.model.V1Build;
import com.openshift.restclient.model.V1alpha1CertificateSigningRequest;
import com.openshift.restclient.model.V1ClusterNetwork;
import com.openshift.restclient.model.V1ClusterPolicy;
import com.openshift.restclient.model.V1ClusterPolicyBinding;
import com.openshift.restclient.model.V1ClusterResourceQuota;
import com.openshift.restclient.model.V1ClusterRole;
import com.openshift.restclient.model.V1ClusterRoleBinding;
import com.openshift.restclient.model.V1ConfigMap;
import com.openshift.restclient.model.V1beta1DaemonSet;
import com.openshift.restclient.model.V1DeploymentConfig;
import com.openshift.restclient.model.V1DeploymentConfigRollback;
import com.openshift.restclient.model.V1beta1Deployment;
import com.openshift.restclient.model.V1EgressNetworkPolicy;
import com.openshift.restclient.model.V1Endpoints;
import com.openshift.restclient.model.V1Event;
import com.openshift.restclient.model.V1Group;
import com.openshift.restclient.model.V1HostSubnet;
import com.openshift.restclient.model.V1Identity;
import com.openshift.restclient.model.V1Image;
import com.openshift.restclient.model.V1ImageSignature;
import com.openshift.restclient.model.V1ImageStream;
import com.openshift.restclient.model.V1ImageStreamImport;
import com.openshift.restclient.model.V1ImageStreamMapping;
import com.openshift.restclient.model.V1ImageStreamTag;
import com.openshift.restclient.model.V1beta1Ingress;
import com.openshift.restclient.model.V1LimitRange;
import com.openshift.restclient.model.V1LocalResourceAccessReview;
import com.openshift.restclient.model.V1LocalSubjectAccessReview;
import com.openshift.restclient.model.V1Namespace;
import com.openshift.restclient.model.V1BuildRequest;
import com.openshift.restclient.model.V1beta1DeploymentRollback;
import com.openshift.restclient.model.V1alpha1Eviction;
import com.openshift.restclient.model.V1beta1NetworkPolicy;
import com.openshift.restclient.model.V1PersistentVolumeClaim;
import com.openshift.restclient.model.V1alpha1PetSet;
import com.openshift.restclient.model.V1Pod;
import com.openshift.restclient.model.V1alpha1PodDisruptionBudget;
import com.openshift.restclient.model.V1PodSecurityPolicyReview;
import com.openshift.restclient.model.V1PodSecurityPolicySelfSubjectReview;
import com.openshift.restclient.model.V1PodSecurityPolicySubjectReview;
import com.openshift.restclient.model.V1PodTemplate;
import com.openshift.restclient.model.V1Policy;
import com.openshift.restclient.model.V1PolicyBinding;
import com.openshift.restclient.model.V1beta1ReplicaSet;
import com.openshift.restclient.model.V1ReplicationController;
import com.openshift.restclient.model.V1ResourceAccessReview;
import com.openshift.restclient.model.V1ResourceQuota;
import com.openshift.restclient.model.V1Role;
import com.openshift.restclient.model.V1RoleBinding;
import com.openshift.restclient.model.V1Route;
import com.openshift.restclient.model.V2alpha1ScheduledJob;
import com.openshift.restclient.model.V1Secret;
import com.openshift.restclient.model.V1SelfSubjectRulesReview;
import com.openshift.restclient.model.V1Service;
import com.openshift.restclient.model.V1ServiceAccount;
import com.openshift.restclient.model.V1SubjectAccessReview;
import com.openshift.restclient.model.V1NetNamespace;
import com.openshift.restclient.model.V1Node;
import com.openshift.restclient.model.V1OAuthAccessToken;
import com.openshift.restclient.model.V1OAuthAuthorizeToken;
import com.openshift.restclient.model.V1OAuthClient;
import com.openshift.restclient.model.V1OAuthClientAuthorization;
import com.openshift.restclient.model.V1PersistentVolume;
import com.openshift.restclient.model.V1beta1PodSecurityPolicy;
import com.openshift.restclient.model.V1Project;
import com.openshift.restclient.model.V1ProjectRequest;
import com.openshift.restclient.model.V1SecurityContextConstraints;
import com.openshift.restclient.model.V1beta1StorageClass;
import com.openshift.restclient.model.V1beta1ThirdPartyResource;
import com.openshift.restclient.model.V1beta1TokenReview;
import com.openshift.restclient.model.V1User;
import com.openshift.restclient.model.V1UserIdentityMapping;
import com.openshift.restclient.model.V1AppliedClusterResourceQuotaList;
import com.openshift.restclient.model.V1BuildConfigList;
import com.openshift.restclient.model.V1BuildList;
import com.openshift.restclient.model.V1alpha1CertificateSigningRequestList;
import com.openshift.restclient.model.V1ClusterNetworkList;
import com.openshift.restclient.model.V1ClusterPolicyList;
import com.openshift.restclient.model.V1ClusterPolicyBindingList;
import com.openshift.restclient.model.V1ClusterResourceQuotaList;
import com.openshift.restclient.model.V1ClusterRoleList;
import com.openshift.restclient.model.V1ClusterRoleBindingList;
import com.openshift.restclient.model.V1ComponentStatusList;
import com.openshift.restclient.model.V1ConfigMapList;
import com.openshift.restclient.model.V1beta1DaemonSetList;
import com.openshift.restclient.model.V1DeploymentConfigList;
import com.openshift.restclient.model.V1beta1DeploymentList;
import com.openshift.restclient.model.V1EgressNetworkPolicyList;
import com.openshift.restclient.model.V1EndpointsList;
import com.openshift.restclient.model.V1EventList;
import com.openshift.restclient.model.V1GroupList;
import com.openshift.restclient.model.V1HostSubnetList;
import com.openshift.restclient.model.V1IdentityList;
import com.openshift.restclient.model.V1ImageList;
import com.openshift.restclient.model.V1ImageStreamList;
import com.openshift.restclient.model.V1ImageStreamTagList;
import com.openshift.restclient.model.V1beta1IngressList;
import com.openshift.restclient.model.V1LimitRangeList;
import com.openshift.restclient.model.V1NamespaceList;
import com.openshift.restclient.model.V1beta1NetworkPolicyList;
import com.openshift.restclient.model.V1PersistentVolumeClaimList;
import com.openshift.restclient.model.V1alpha1PetSetList;
import com.openshift.restclient.model.V1PodList;
import com.openshift.restclient.model.V1alpha1PodDisruptionBudgetList;
import com.openshift.restclient.model.V1PodTemplateList;
import com.openshift.restclient.model.V1PolicyList;
import com.openshift.restclient.model.V1PolicyBindingList;
import com.openshift.restclient.model.V1beta1ReplicaSetList;
import com.openshift.restclient.model.V1ReplicationControllerList;
import com.openshift.restclient.model.V1ResourceQuotaList;
import com.openshift.restclient.model.V1RoleList;
import com.openshift.restclient.model.V1RoleBindingList;
import com.openshift.restclient.model.V1RouteList;
import com.openshift.restclient.model.V2alpha1ScheduledJobList;
import com.openshift.restclient.model.V1SecretList;
import com.openshift.restclient.model.V1ServiceList;
import com.openshift.restclient.model.V1ServiceAccountList;
import com.openshift.restclient.model.V1TemplateList;
import com.openshift.restclient.model.V1NetNamespaceList;
import com.openshift.restclient.model.V1NodeList;
import com.openshift.restclient.model.V1OAuthAccessTokenList;
import com.openshift.restclient.model.V1OAuthAuthorizeTokenList;
import com.openshift.restclient.model.V1OAuthClientList;
import com.openshift.restclient.model.V1OAuthClientAuthorizationList;
import com.openshift.restclient.model.V1PersistentVolumeList;
import com.openshift.restclient.model.V1beta1PodSecurityPolicyList;
import com.openshift.restclient.model.V1ProjectList;
import com.openshift.restclient.model.V1SecurityContextConstraintsList;
import com.openshift.restclient.model.V1beta1StorageClassList;
import com.openshift.restclient.model.V1beta1ThirdPartyResourceList;
import com.openshift.restclient.model.V1UserList;
import com.openshift.restclient.model.V1Template;
import com.openshift.restclient.model.V1ComponentStatus;
import com.openshift.restclient.model.V1AppliedClusterResourceQuota;
import com.openshift.restclient.model.V1BuildLog;
import com.openshift.restclient.model.V1DeploymentLog;
import com.openshift.restclient.model.V1ImageStreamImage;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * get available API versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiGetTest() throws ApiException {
        // api.apiGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1GetTest() throws ApiException {
        // api.apiV1Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1NamespacesNamespaceReplicationcontrollersNameScaleGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1Scale response = api.apiV1NamespacesNamespaceReplicationcontrollersNameScaleGet(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1NamespacesNamespaceReplicationcontrollersNameScalePatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Scale response = api.apiV1NamespacesNamespaceReplicationcontrollersNameScalePatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1NamespacesNamespaceReplicationcontrollersNameScalePutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Scale body = null;
        String pretty = null;
        // V1Scale response = api.apiV1NamespacesNamespaceReplicationcontrollersNameScalePut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get information of a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAppsGetTest() throws ApiException {
        // api.apisAppsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAppsV1alpha1GetTest() throws ApiException {
        // api.apisAppsV1alpha1Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get information of a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAuthenticationK8sIoGetTest() throws ApiException {
        // api.apisAuthenticationK8sIoGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAuthenticationK8sIoV1beta1GetTest() throws ApiException {
        // api.apisAuthenticationK8sIoV1beta1Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get information of a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingGetTest() throws ApiException {
        // api.apisAutoscalingGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1GetTest() throws ApiException {
        // api.apisAutoscalingV1Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1HorizontalpodautoscalersGetTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1HorizontalPodAutoscalerList response = api.apisAutoscalingV1HorizontalpodautoscalersGet(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1HorizontalpodautoscalersPostTest() throws ApiException {
        V1HorizontalPodAutoscaler body = null;
        String pretty = null;
        // V1HorizontalPodAutoscaler response = api.apisAutoscalingV1HorizontalpodautoscalersPost(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersDeleteTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersDelete(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersGetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1HorizontalPodAutoscalerList response = api.apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersGet(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNameDeleteTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNameDelete(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNameGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1HorizontalPodAutoscaler response = api.apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNameGet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNamePatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1HorizontalPodAutoscaler response = api.apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNamePatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNamePutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1HorizontalPodAutoscaler body = null;
        String pretty = null;
        // V1HorizontalPodAutoscaler response = api.apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNamePut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNameStatusGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1HorizontalPodAutoscaler response = api.apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNameStatusGet(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNameStatusPatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1HorizontalPodAutoscaler response = api.apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNameStatusPatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNameStatusPutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1HorizontalPodAutoscaler body = null;
        String pretty = null;
        // V1HorizontalPodAutoscaler response = api.apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersNameStatusPut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersPostTest() throws ApiException {
        String namespace = null;
        V1HorizontalPodAutoscaler body = null;
        String pretty = null;
        // V1HorizontalPodAutoscaler response = api.apisAutoscalingV1NamespacesNamespaceHorizontalpodautoscalersPost(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1WatchHorizontalpodautoscalersGetTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisAutoscalingV1WatchHorizontalpodautoscalersGet(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1WatchNamespacesNamespaceHorizontalpodautoscalersGetTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisAutoscalingV1WatchNamespacesNamespaceHorizontalpodautoscalersGet(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisAutoscalingV1WatchNamespacesNamespaceHorizontalpodautoscalersNameGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisAutoscalingV1WatchNamespacesNamespaceHorizontalpodautoscalersNameGet(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get information of a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchGetTest() throws ApiException {
        // api.apisBatchGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1GetTest() throws ApiException {
        // api.apisBatchV1Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1JobsGetTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1JobList response = api.apisBatchV1JobsGet(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1JobsPostTest() throws ApiException {
        V1Job body = null;
        String pretty = null;
        // V1Job response = api.apisBatchV1JobsPost(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1NamespacesNamespaceJobsDeleteTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.apisBatchV1NamespacesNamespaceJobsDelete(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1NamespacesNamespaceJobsGetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1JobList response = api.apisBatchV1NamespacesNamespaceJobsGet(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1NamespacesNamespaceJobsNameDeleteTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.apisBatchV1NamespacesNamespaceJobsNameDelete(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1NamespacesNamespaceJobsNameGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Job response = api.apisBatchV1NamespacesNamespaceJobsNameGet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1NamespacesNamespaceJobsNamePatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Job response = api.apisBatchV1NamespacesNamespaceJobsNamePatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1NamespacesNamespaceJobsNamePutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Job body = null;
        String pretty = null;
        // V1Job response = api.apisBatchV1NamespacesNamespaceJobsNamePut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1NamespacesNamespaceJobsNameStatusGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1Job response = api.apisBatchV1NamespacesNamespaceJobsNameStatusGet(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1NamespacesNamespaceJobsNameStatusPatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Job response = api.apisBatchV1NamespacesNamespaceJobsNameStatusPatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1NamespacesNamespaceJobsNameStatusPutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Job body = null;
        String pretty = null;
        // V1Job response = api.apisBatchV1NamespacesNamespaceJobsNameStatusPut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1NamespacesNamespaceJobsPostTest() throws ApiException {
        String namespace = null;
        V1Job body = null;
        String pretty = null;
        // V1Job response = api.apisBatchV1NamespacesNamespaceJobsPost(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1WatchJobsGetTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisBatchV1WatchJobsGet(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1WatchNamespacesNamespaceJobsGetTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisBatchV1WatchNamespacesNamespaceJobsGet(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV1WatchNamespacesNamespaceJobsNameGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisBatchV1WatchNamespacesNamespaceJobsNameGet(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1GetTest() throws ApiException {
        // api.apisBatchV2alpha1Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1JobsGetTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V2alpha1JobList response = api.apisBatchV2alpha1JobsGet(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1JobsPostTest() throws ApiException {
        V2alpha1Job body = null;
        String pretty = null;
        // V2alpha1Job response = api.apisBatchV2alpha1JobsPost(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1NamespacesNamespaceJobsDeleteTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.apisBatchV2alpha1NamespacesNamespaceJobsDelete(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1NamespacesNamespaceJobsGetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V2alpha1JobList response = api.apisBatchV2alpha1NamespacesNamespaceJobsGet(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1NamespacesNamespaceJobsNameDeleteTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.apisBatchV2alpha1NamespacesNamespaceJobsNameDelete(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1NamespacesNamespaceJobsNameGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V2alpha1Job response = api.apisBatchV2alpha1NamespacesNamespaceJobsNameGet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1NamespacesNamespaceJobsNamePatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V2alpha1Job response = api.apisBatchV2alpha1NamespacesNamespaceJobsNamePatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1NamespacesNamespaceJobsNamePutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V2alpha1Job body = null;
        String pretty = null;
        // V2alpha1Job response = api.apisBatchV2alpha1NamespacesNamespaceJobsNamePut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1NamespacesNamespaceJobsNameStatusGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V2alpha1Job response = api.apisBatchV2alpha1NamespacesNamespaceJobsNameStatusGet(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1NamespacesNamespaceJobsNameStatusPatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V2alpha1Job response = api.apisBatchV2alpha1NamespacesNamespaceJobsNameStatusPatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1NamespacesNamespaceJobsNameStatusPutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V2alpha1Job body = null;
        String pretty = null;
        // V2alpha1Job response = api.apisBatchV2alpha1NamespacesNamespaceJobsNameStatusPut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1NamespacesNamespaceJobsPostTest() throws ApiException {
        String namespace = null;
        V2alpha1Job body = null;
        String pretty = null;
        // V2alpha1Job response = api.apisBatchV2alpha1NamespacesNamespaceJobsPost(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1WatchJobsGetTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisBatchV2alpha1WatchJobsGet(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1WatchNamespacesNamespaceJobsGetTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisBatchV2alpha1WatchNamespacesNamespaceJobsGet(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisBatchV2alpha1WatchNamespacesNamespaceJobsNameGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisBatchV2alpha1WatchNamespacesNamespaceJobsNameGet(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get information of a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisCertificatesK8sIoGetTest() throws ApiException {
        // api.apisCertificatesK8sIoGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisCertificatesK8sIoV1alpha1GetTest() throws ApiException {
        // api.apisCertificatesK8sIoV1alpha1Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get information of a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsGetTest() throws ApiException {
        // api.apisExtensionsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1GetTest() throws ApiException {
        // api.apisExtensionsV1beta1Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1HorizontalpodautoscalersGetTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1HorizontalPodAutoscalerList response = api.apisExtensionsV1beta1HorizontalpodautoscalersGet(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1HorizontalpodautoscalersPostTest() throws ApiException {
        V1beta1HorizontalPodAutoscaler body = null;
        String pretty = null;
        // V1beta1HorizontalPodAutoscaler response = api.apisExtensionsV1beta1HorizontalpodautoscalersPost(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1JobsGetTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1JobList response = api.apisExtensionsV1beta1JobsGet(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1JobsPostTest() throws ApiException {
        V1beta1Job body = null;
        String pretty = null;
        // V1beta1Job response = api.apisExtensionsV1beta1JobsPost(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceDeploymentsNameScaleGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1beta1Scale response = api.apisExtensionsV1beta1NamespacesNamespaceDeploymentsNameScaleGet(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceDeploymentsNameScalePatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1Scale response = api.apisExtensionsV1beta1NamespacesNamespaceDeploymentsNameScalePatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceDeploymentsNameScalePutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Scale body = null;
        String pretty = null;
        // V1beta1Scale response = api.apisExtensionsV1beta1NamespacesNamespaceDeploymentsNameScalePut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersDeleteTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersDelete(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersGetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1HorizontalPodAutoscalerList response = api.apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersGet(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNameDeleteTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNameDelete(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNameGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1beta1HorizontalPodAutoscaler response = api.apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNameGet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNamePatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1HorizontalPodAutoscaler response = api.apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNamePatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNamePutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1HorizontalPodAutoscaler body = null;
        String pretty = null;
        // V1beta1HorizontalPodAutoscaler response = api.apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNamePut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNameStatusGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1beta1HorizontalPodAutoscaler response = api.apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNameStatusGet(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNameStatusPatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1HorizontalPodAutoscaler response = api.apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNameStatusPatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNameStatusPutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1HorizontalPodAutoscaler body = null;
        String pretty = null;
        // V1beta1HorizontalPodAutoscaler response = api.apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersNameStatusPut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersPostTest() throws ApiException {
        String namespace = null;
        V1beta1HorizontalPodAutoscaler body = null;
        String pretty = null;
        // V1beta1HorizontalPodAutoscaler response = api.apisExtensionsV1beta1NamespacesNamespaceHorizontalpodautoscalersPost(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceJobsDeleteTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.apisExtensionsV1beta1NamespacesNamespaceJobsDelete(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceJobsGetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1JobList response = api.apisExtensionsV1beta1NamespacesNamespaceJobsGet(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceJobsNameDeleteTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.apisExtensionsV1beta1NamespacesNamespaceJobsNameDelete(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceJobsNameGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1beta1Job response = api.apisExtensionsV1beta1NamespacesNamespaceJobsNameGet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceJobsNamePatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1Job response = api.apisExtensionsV1beta1NamespacesNamespaceJobsNamePatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceJobsNamePutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Job body = null;
        String pretty = null;
        // V1beta1Job response = api.apisExtensionsV1beta1NamespacesNamespaceJobsNamePut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceJobsNameStatusGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1beta1Job response = api.apisExtensionsV1beta1NamespacesNamespaceJobsNameStatusGet(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceJobsNameStatusPatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1Job response = api.apisExtensionsV1beta1NamespacesNamespaceJobsNameStatusPatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceJobsNameStatusPutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Job body = null;
        String pretty = null;
        // V1beta1Job response = api.apisExtensionsV1beta1NamespacesNamespaceJobsNameStatusPut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceJobsPostTest() throws ApiException {
        String namespace = null;
        V1beta1Job body = null;
        String pretty = null;
        // V1beta1Job response = api.apisExtensionsV1beta1NamespacesNamespaceJobsPost(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceReplicasetsNameScaleGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1beta1Scale response = api.apisExtensionsV1beta1NamespacesNamespaceReplicasetsNameScaleGet(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceReplicasetsNameScalePatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1Scale response = api.apisExtensionsV1beta1NamespacesNamespaceReplicasetsNameScalePatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceReplicasetsNameScalePutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Scale body = null;
        String pretty = null;
        // V1beta1Scale response = api.apisExtensionsV1beta1NamespacesNamespaceReplicasetsNameScalePut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceReplicationcontrollersNameScaleGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1beta1Scale response = api.apisExtensionsV1beta1NamespacesNamespaceReplicationcontrollersNameScaleGet(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceReplicationcontrollersNameScalePatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1Scale response = api.apisExtensionsV1beta1NamespacesNamespaceReplicationcontrollersNameScalePatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1NamespacesNamespaceReplicationcontrollersNameScalePutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Scale body = null;
        String pretty = null;
        // V1beta1Scale response = api.apisExtensionsV1beta1NamespacesNamespaceReplicationcontrollersNameScalePut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1WatchHorizontalpodautoscalersGetTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisExtensionsV1beta1WatchHorizontalpodautoscalersGet(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1WatchJobsGetTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisExtensionsV1beta1WatchJobsGet(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1WatchNamespacesNamespaceHorizontalpodautoscalersGetTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisExtensionsV1beta1WatchNamespacesNamespaceHorizontalpodautoscalersGet(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind HorizontalPodAutoscaler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1WatchNamespacesNamespaceHorizontalpodautoscalersNameGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisExtensionsV1beta1WatchNamespacesNamespaceHorizontalpodautoscalersNameGet(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1WatchNamespacesNamespaceJobsGetTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisExtensionsV1beta1WatchNamespacesNamespaceJobsGet(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisExtensionsV1beta1WatchNamespacesNamespaceJobsNameGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.apisExtensionsV1beta1WatchNamespacesNamespaceJobsNameGet(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available API versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisGetTest() throws ApiException {
        // api.apisGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get information of a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisPolicyGetTest() throws ApiException {
        // api.apisPolicyGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisPolicyV1alpha1GetTest() throws ApiException {
        // api.apisPolicyV1alpha1Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get information of a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisStorageK8sIoGetTest() throws ApiException {
        // api.apisStorageK8sIoGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisStorageK8sIoV1beta1GetTest() throws ApiException {
        // api.apisStorageK8sIoV1beta1Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectDeleteNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectDeleteNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectDeleteNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectDeleteNamespacedPodProxyWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectDeleteNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectDeleteNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectDeleteNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectDeleteNamespacedServiceProxyWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectDeleteNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        // api.connectDeleteNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectDeleteNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path2 = null;
        String path = null;
        // api.connectDeleteNodeProxyWithPath(name, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to attach of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedPodAttachTest() throws ApiException {
        String name = null;
        String namespace = null;
        String container = null;
        Boolean stderr = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean tty = null;
        // api.connectGetNamespacedPodAttach(name, namespace, container, stderr, stdin, stdout, tty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to exec of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedPodExecTest() throws ApiException {
        String name = null;
        String namespace = null;
        String command = null;
        String container = null;
        Boolean stderr = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean tty = null;
        // api.connectGetNamespacedPodExec(name, namespace, command, container, stderr, stdin, stdout, tty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to portforward of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedPodPortforwardTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.connectGetNamespacedPodPortforward(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectGetNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectGetNamespacedPodProxyWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectGetNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectGetNamespacedServiceProxyWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        // api.connectGetNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path2 = null;
        String path = null;
        // api.connectGetNodeProxyWithPath(name, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectHeadNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectHeadNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectHeadNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectHeadNamespacedPodProxyWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectHeadNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectHeadNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectHeadNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectHeadNamespacedServiceProxyWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectHeadNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        // api.connectHeadNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectHeadNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path2 = null;
        String path = null;
        // api.connectHeadNodeProxyWithPath(name, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectOptionsNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectOptionsNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectOptionsNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectOptionsNamespacedPodProxyWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectOptionsNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectOptionsNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectOptionsNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectOptionsNamespacedServiceProxyWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectOptionsNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        // api.connectOptionsNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectOptionsNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path2 = null;
        String path = null;
        // api.connectOptionsNodeProxyWithPath(name, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to instantiatebinary of BinaryBuildRequestOptions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedBinaryBuildRequestOptionsInstantiatebinaryTest() throws ApiException {
        String name = null;
        String namespace = null;
        String asFile = null;
        String revisionAuthorEmail = null;
        String revisionAuthorName = null;
        String revisionCommit = null;
        String revisionCommitterEmail = null;
        String revisionCommitterName = null;
        String revisionMessage = null;
        // api.connectPostNamespacedBinaryBuildRequestOptionsInstantiatebinary(name, namespace, asFile, revisionAuthorEmail, revisionAuthorName, revisionCommit, revisionCommitterEmail, revisionCommitterName, revisionMessage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to attach of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedPodAttachTest() throws ApiException {
        String name = null;
        String namespace = null;
        String container = null;
        Boolean stderr = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean tty = null;
        // api.connectPostNamespacedPodAttach(name, namespace, container, stderr, stdin, stdout, tty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to exec of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedPodExecTest() throws ApiException {
        String name = null;
        String namespace = null;
        String command = null;
        String container = null;
        Boolean stderr = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean tty = null;
        // api.connectPostNamespacedPodExec(name, namespace, command, container, stderr, stdin, stdout, tty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to portforward of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedPodPortforwardTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.connectPostNamespacedPodPortforward(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectPostNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectPostNamespacedPodProxyWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectPostNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectPostNamespacedServiceProxyWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to webhooks of Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedStatusWebhooksTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectPostNamespacedStatusWebhooks(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to webhooks of Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedStatusWebhooksWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectPostNamespacedStatusWebhooksWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        // api.connectPostNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path2 = null;
        String path = null;
        // api.connectPostNodeProxyWithPath(name, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPutNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectPutNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPutNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectPutNamespacedPodProxyWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPutNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.connectPutNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPutNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path2 = null;
        String path = null;
        // api.connectPutNamespacedServiceProxyWithPath(name, namespace, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPutNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        // api.connectPutNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPutNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path2 = null;
        String path = null;
        // api.connectPutNodeProxyWithPath(name, path2, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Binding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBindingForAllNamespacesTest() throws ApiException {
        V1Binding body = null;
        String pretty = null;
        // V1Binding response = api.createBindingForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBuildConfigForAllNamespacesTest() throws ApiException {
        V1BuildConfig body = null;
        String pretty = null;
        // V1BuildConfig response = api.createBuildConfigForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBuildForAllNamespacesTest() throws ApiException {
        V1Build body = null;
        String pretty = null;
        // V1Build response = api.createBuildForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a CertificateSigningRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCertificateSigningRequestTest() throws ApiException {
        V1alpha1CertificateSigningRequest body = null;
        String pretty = null;
        // V1alpha1CertificateSigningRequest response = api.createCertificateSigningRequest(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterNetworkTest() throws ApiException {
        V1ClusterNetwork body = null;
        String pretty = null;
        // V1ClusterNetwork response = api.createClusterNetwork(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ClusterPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterPolicyTest() throws ApiException {
        V1ClusterPolicy body = null;
        String pretty = null;
        // V1ClusterPolicy response = api.createClusterPolicy(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ClusterPolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterPolicyBindingTest() throws ApiException {
        V1ClusterPolicyBinding body = null;
        String pretty = null;
        // V1ClusterPolicyBinding response = api.createClusterPolicyBinding(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterResourceQuotaTest() throws ApiException {
        V1ClusterResourceQuota body = null;
        String pretty = null;
        // V1ClusterResourceQuota response = api.createClusterResourceQuota(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ClusterRole
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterRoleTest() throws ApiException {
        V1ClusterRole body = null;
        String pretty = null;
        // V1ClusterRole response = api.createClusterRole(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ClusterRoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterRoleBindingTest() throws ApiException {
        V1ClusterRoleBinding body = null;
        String pretty = null;
        // V1ClusterRoleBinding response = api.createClusterRoleBinding(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigMapForAllNamespacesTest() throws ApiException {
        V1ConfigMap body = null;
        String pretty = null;
        // V1ConfigMap response = api.createConfigMapForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDaemonSetForAllNamespacesTest() throws ApiException {
        V1beta1DaemonSet body = null;
        String pretty = null;
        // V1beta1DaemonSet response = api.createDaemonSetForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeploymentConfigForAllNamespacesTest() throws ApiException {
        V1DeploymentConfig body = null;
        String pretty = null;
        // V1DeploymentConfig response = api.createDeploymentConfigForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a DeploymentConfigRollback
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeploymentConfigRollbackForAllNamespacesTest() throws ApiException {
        V1DeploymentConfigRollback body = null;
        String pretty = null;
        // V1DeploymentConfigRollback response = api.createDeploymentConfigRollbackForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeploymentForAllNamespacesTest() throws ApiException {
        V1beta1Deployment body = null;
        String pretty = null;
        // V1beta1Deployment response = api.createDeploymentForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEgressNetworkPolicyForAllNamespacesTest() throws ApiException {
        V1EgressNetworkPolicy body = null;
        String pretty = null;
        // V1EgressNetworkPolicy response = api.createEgressNetworkPolicyForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEndpointsForAllNamespacesTest() throws ApiException {
        V1Endpoints body = null;
        String pretty = null;
        // V1Endpoints response = api.createEndpointsForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEventForAllNamespacesTest() throws ApiException {
        V1Event body = null;
        String pretty = null;
        // V1Event response = api.createEventForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        V1Group body = null;
        String pretty = null;
        // V1Group response = api.createGroup(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHostSubnetTest() throws ApiException {
        V1HostSubnet body = null;
        String pretty = null;
        // V1HostSubnet response = api.createHostSubnet(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIdentityTest() throws ApiException {
        V1Identity body = null;
        String pretty = null;
        // V1Identity response = api.createIdentity(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageTest() throws ApiException {
        V1Image body = null;
        String pretty = null;
        // V1Image response = api.createImage(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ImageSignature
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageSignatureTest() throws ApiException {
        V1ImageSignature body = null;
        String pretty = null;
        // V1ImageSignature response = api.createImageSignature(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageStreamForAllNamespacesTest() throws ApiException {
        V1ImageStream body = null;
        String pretty = null;
        // V1ImageStream response = api.createImageStreamForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ImageStreamImport
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageStreamImportForAllNamespacesTest() throws ApiException {
        V1ImageStreamImport body = null;
        String pretty = null;
        // V1ImageStreamImport response = api.createImageStreamImportForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ImageStreamMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageStreamMappingForAllNamespacesTest() throws ApiException {
        V1ImageStreamMapping body = null;
        String pretty = null;
        // V1ImageStreamMapping response = api.createImageStreamMappingForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageStreamTagForAllNamespacesTest() throws ApiException {
        V1ImageStreamTag body = null;
        String pretty = null;
        // V1ImageStreamTag response = api.createImageStreamTagForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIngressForAllNamespacesTest() throws ApiException {
        V1beta1Ingress body = null;
        String pretty = null;
        // V1beta1Ingress response = api.createIngressForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLimitRangeForAllNamespacesTest() throws ApiException {
        V1LimitRange body = null;
        String pretty = null;
        // V1LimitRange response = api.createLimitRangeForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a LocalResourceAccessReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLocalResourceAccessReviewForAllNamespacesTest() throws ApiException {
        V1LocalResourceAccessReview body = null;
        String pretty = null;
        // V1LocalResourceAccessReview response = api.createLocalResourceAccessReviewForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a LocalSubjectAccessReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLocalSubjectAccessReviewForAllNamespacesTest() throws ApiException {
        V1LocalSubjectAccessReview body = null;
        String pretty = null;
        // V1LocalSubjectAccessReview response = api.createLocalSubjectAccessReviewForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespaceTest() throws ApiException {
        V1Namespace body = null;
        String pretty = null;
        // V1Namespace response = api.createNamespace(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Binding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedBindingTest() throws ApiException {
        V1Binding body = null;
        String namespace = null;
        String pretty = null;
        // V1Binding response = api.createNamespacedBinding(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create binding of a Binding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedBindingBindingTest() throws ApiException {
        V1Binding body = null;
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1Binding response = api.createNamespacedBindingBinding(body, name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedBuildTest() throws ApiException {
        String namespace = null;
        V1Build body = null;
        String pretty = null;
        // V1Build response = api.createNamespacedBuild(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedBuildConfigTest() throws ApiException {
        String namespace = null;
        V1BuildConfig body = null;
        String pretty = null;
        // V1BuildConfig response = api.createNamespacedBuildConfig(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create clone of a BuildRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedBuildRequestCloneTest() throws ApiException {
        V1BuildRequest body = null;
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1BuildRequest response = api.createNamespacedBuildRequestClone(body, name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create instantiate of a BuildRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedBuildRequestInstantiateTest() throws ApiException {
        V1BuildRequest body = null;
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1BuildRequest response = api.createNamespacedBuildRequestInstantiate(body, name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedConfigMapTest() throws ApiException {
        String namespace = null;
        V1ConfigMap body = null;
        String pretty = null;
        // V1ConfigMap response = api.createNamespacedConfigMap(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedDaemonSetTest() throws ApiException {
        String namespace = null;
        V1beta1DaemonSet body = null;
        String pretty = null;
        // V1beta1DaemonSet response = api.createNamespacedDaemonSet(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedDeploymentTest() throws ApiException {
        String namespace = null;
        V1beta1Deployment body = null;
        String pretty = null;
        // V1beta1Deployment response = api.createNamespacedDeployment(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedDeploymentConfigTest() throws ApiException {
        String namespace = null;
        V1DeploymentConfig body = null;
        String pretty = null;
        // V1DeploymentConfig response = api.createNamespacedDeploymentConfig(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a DeploymentConfigRollback
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedDeploymentConfigRollbackTest() throws ApiException {
        V1DeploymentConfigRollback body = null;
        String namespace = null;
        String pretty = null;
        // V1DeploymentConfigRollback response = api.createNamespacedDeploymentConfigRollback(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create rollback of a DeploymentConfigRollback
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedDeploymentConfigRollbackRollbackTest() throws ApiException {
        V1DeploymentConfigRollback body = null;
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1DeploymentConfigRollback response = api.createNamespacedDeploymentConfigRollbackRollback(body, name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create rollback of a DeploymentRollback
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedDeploymentRollbackRollbackTest() throws ApiException {
        V1beta1DeploymentRollback body = null;
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1beta1DeploymentRollback response = api.createNamespacedDeploymentRollbackRollback(body, name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedEgressNetworkPolicyTest() throws ApiException {
        String namespace = null;
        V1EgressNetworkPolicy body = null;
        String pretty = null;
        // V1EgressNetworkPolicy response = api.createNamespacedEgressNetworkPolicy(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedEndpointsTest() throws ApiException {
        String namespace = null;
        V1Endpoints body = null;
        String pretty = null;
        // V1Endpoints response = api.createNamespacedEndpoints(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedEventTest() throws ApiException {
        String namespace = null;
        V1Event body = null;
        String pretty = null;
        // V1Event response = api.createNamespacedEvent(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create eviction of a Eviction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedEvictionEvictionTest() throws ApiException {
        V1alpha1Eviction body = null;
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1alpha1Eviction response = api.createNamespacedEvictionEviction(body, name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedImageStreamTest() throws ApiException {
        String namespace = null;
        V1ImageStream body = null;
        String pretty = null;
        // V1ImageStream response = api.createNamespacedImageStream(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ImageStreamImport
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedImageStreamImportTest() throws ApiException {
        V1ImageStreamImport body = null;
        String namespace = null;
        String pretty = null;
        // V1ImageStreamImport response = api.createNamespacedImageStreamImport(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ImageStreamMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedImageStreamMappingTest() throws ApiException {
        V1ImageStreamMapping body = null;
        String namespace = null;
        String pretty = null;
        // V1ImageStreamMapping response = api.createNamespacedImageStreamMapping(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedImageStreamTagTest() throws ApiException {
        String namespace = null;
        V1ImageStreamTag body = null;
        String pretty = null;
        // V1ImageStreamTag response = api.createNamespacedImageStreamTag(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedIngressTest() throws ApiException {
        String namespace = null;
        V1beta1Ingress body = null;
        String pretty = null;
        // V1beta1Ingress response = api.createNamespacedIngress(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedLimitRangeTest() throws ApiException {
        String namespace = null;
        V1LimitRange body = null;
        String pretty = null;
        // V1LimitRange response = api.createNamespacedLimitRange(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a LocalResourceAccessReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedLocalResourceAccessReviewTest() throws ApiException {
        V1LocalResourceAccessReview body = null;
        String namespace = null;
        String pretty = null;
        // V1LocalResourceAccessReview response = api.createNamespacedLocalResourceAccessReview(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a LocalSubjectAccessReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedLocalSubjectAccessReviewTest() throws ApiException {
        V1LocalSubjectAccessReview body = null;
        String namespace = null;
        String pretty = null;
        // V1LocalSubjectAccessReview response = api.createNamespacedLocalSubjectAccessReview(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedNetworkPolicyTest() throws ApiException {
        String namespace = null;
        V1beta1NetworkPolicy body = null;
        String pretty = null;
        // V1beta1NetworkPolicy response = api.createNamespacedNetworkPolicy(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPersistentVolumeClaimTest() throws ApiException {
        String namespace = null;
        V1PersistentVolumeClaim body = null;
        String pretty = null;
        // V1PersistentVolumeClaim response = api.createNamespacedPersistentVolumeClaim(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPetSetTest() throws ApiException {
        String namespace = null;
        V1alpha1PetSet body = null;
        String pretty = null;
        // V1alpha1PetSet response = api.createNamespacedPetSet(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPodTest() throws ApiException {
        String namespace = null;
        V1Pod body = null;
        String pretty = null;
        // V1Pod response = api.createNamespacedPod(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPodDisruptionBudgetTest() throws ApiException {
        String namespace = null;
        V1alpha1PodDisruptionBudget body = null;
        String pretty = null;
        // V1alpha1PodDisruptionBudget response = api.createNamespacedPodDisruptionBudget(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodSecurityPolicyReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPodSecurityPolicyReviewTest() throws ApiException {
        V1PodSecurityPolicyReview body = null;
        String namespace = null;
        String pretty = null;
        // V1PodSecurityPolicyReview response = api.createNamespacedPodSecurityPolicyReview(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodSecurityPolicySelfSubjectReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPodSecurityPolicySelfSubjectReviewTest() throws ApiException {
        V1PodSecurityPolicySelfSubjectReview body = null;
        String namespace = null;
        String pretty = null;
        // V1PodSecurityPolicySelfSubjectReview response = api.createNamespacedPodSecurityPolicySelfSubjectReview(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodSecurityPolicySubjectReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPodSecurityPolicySubjectReviewTest() throws ApiException {
        V1PodSecurityPolicySubjectReview body = null;
        String namespace = null;
        String pretty = null;
        // V1PodSecurityPolicySubjectReview response = api.createNamespacedPodSecurityPolicySubjectReview(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPodTemplateTest() throws ApiException {
        String namespace = null;
        V1PodTemplate body = null;
        String pretty = null;
        // V1PodTemplate response = api.createNamespacedPodTemplate(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPolicyTest() throws ApiException {
        String namespace = null;
        V1Policy body = null;
        String pretty = null;
        // V1Policy response = api.createNamespacedPolicy(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPolicyBindingTest() throws ApiException {
        String namespace = null;
        V1PolicyBinding body = null;
        String pretty = null;
        // V1PolicyBinding response = api.createNamespacedPolicyBinding(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedReplicaSetTest() throws ApiException {
        String namespace = null;
        V1beta1ReplicaSet body = null;
        String pretty = null;
        // V1beta1ReplicaSet response = api.createNamespacedReplicaSet(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedReplicationControllerTest() throws ApiException {
        String namespace = null;
        V1ReplicationController body = null;
        String pretty = null;
        // V1ReplicationController response = api.createNamespacedReplicationController(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ResourceAccessReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedResourceAccessReviewTest() throws ApiException {
        V1ResourceAccessReview body = null;
        String namespace = null;
        String pretty = null;
        // V1ResourceAccessReview response = api.createNamespacedResourceAccessReview(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedResourceQuotaTest() throws ApiException {
        String namespace = null;
        V1ResourceQuota body = null;
        String pretty = null;
        // V1ResourceQuota response = api.createNamespacedResourceQuota(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedRoleTest() throws ApiException {
        String namespace = null;
        V1Role body = null;
        String pretty = null;
        // V1Role response = api.createNamespacedRole(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a RoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedRoleBindingTest() throws ApiException {
        String namespace = null;
        V1RoleBinding body = null;
        String pretty = null;
        // V1RoleBinding response = api.createNamespacedRoleBinding(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedRouteTest() throws ApiException {
        String namespace = null;
        V1Route body = null;
        String pretty = null;
        // V1Route response = api.createNamespacedRoute(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedScheduledJobTest() throws ApiException {
        String namespace = null;
        V2alpha1ScheduledJob body = null;
        String pretty = null;
        // V2alpha1ScheduledJob response = api.createNamespacedScheduledJob(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedSecretTest() throws ApiException {
        String namespace = null;
        V1Secret body = null;
        String pretty = null;
        // V1Secret response = api.createNamespacedSecret(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a SelfSubjectRulesReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedSelfSubjectRulesReviewTest() throws ApiException {
        V1SelfSubjectRulesReview body = null;
        String namespace = null;
        String pretty = null;
        // V1SelfSubjectRulesReview response = api.createNamespacedSelfSubjectRulesReview(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedServiceTest() throws ApiException {
        String namespace = null;
        V1Service body = null;
        String pretty = null;
        // V1Service response = api.createNamespacedService(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedServiceAccountTest() throws ApiException {
        String namespace = null;
        V1ServiceAccount body = null;
        String pretty = null;
        // V1ServiceAccount response = api.createNamespacedServiceAccount(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a SubjectAccessReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedSubjectAccessReviewTest() throws ApiException {
        V1SubjectAccessReview body = null;
        String namespace = null;
        String pretty = null;
        // V1SubjectAccessReview response = api.createNamespacedSubjectAccessReview(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetNamespaceTest() throws ApiException {
        V1NetNamespace body = null;
        String pretty = null;
        // V1NetNamespace response = api.createNetNamespace(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkPolicyForAllNamespacesTest() throws ApiException {
        V1beta1NetworkPolicy body = null;
        String pretty = null;
        // V1beta1NetworkPolicy response = api.createNetworkPolicyForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNodeTest() throws ApiException {
        V1Node body = null;
        String pretty = null;
        // V1Node response = api.createNode(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOAuthAccessTokenTest() throws ApiException {
        V1OAuthAccessToken body = null;
        String pretty = null;
        // V1OAuthAccessToken response = api.createOAuthAccessToken(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOAuthAuthorizeTokenTest() throws ApiException {
        V1OAuthAuthorizeToken body = null;
        String pretty = null;
        // V1OAuthAuthorizeToken response = api.createOAuthAuthorizeToken(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOAuthClientTest() throws ApiException {
        V1OAuthClient body = null;
        String pretty = null;
        // V1OAuthClient response = api.createOAuthClient(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOAuthClientAuthorizationTest() throws ApiException {
        V1OAuthClientAuthorization body = null;
        String pretty = null;
        // V1OAuthClientAuthorization response = api.createOAuthClientAuthorization(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPersistentVolumeTest() throws ApiException {
        V1PersistentVolume body = null;
        String pretty = null;
        // V1PersistentVolume response = api.createPersistentVolume(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPersistentVolumeClaimForAllNamespacesTest() throws ApiException {
        V1PersistentVolumeClaim body = null;
        String pretty = null;
        // V1PersistentVolumeClaim response = api.createPersistentVolumeClaimForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPetSetForAllNamespacesTest() throws ApiException {
        V1alpha1PetSet body = null;
        String pretty = null;
        // V1alpha1PetSet response = api.createPetSetForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPodDisruptionBudgetForAllNamespacesTest() throws ApiException {
        V1alpha1PodDisruptionBudget body = null;
        String pretty = null;
        // V1alpha1PodDisruptionBudget response = api.createPodDisruptionBudgetForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPodForAllNamespacesTest() throws ApiException {
        V1Pod body = null;
        String pretty = null;
        // V1Pod response = api.createPodForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPodSecurityPolicyTest() throws ApiException {
        V1beta1PodSecurityPolicy body = null;
        String pretty = null;
        // V1beta1PodSecurityPolicy response = api.createPodSecurityPolicy(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodSecurityPolicyReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPodSecurityPolicyReviewForAllNamespacesTest() throws ApiException {
        V1PodSecurityPolicyReview body = null;
        String pretty = null;
        // V1PodSecurityPolicyReview response = api.createPodSecurityPolicyReviewForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodSecurityPolicySelfSubjectReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPodSecurityPolicySelfSubjectReviewForAllNamespacesTest() throws ApiException {
        V1PodSecurityPolicySelfSubjectReview body = null;
        String pretty = null;
        // V1PodSecurityPolicySelfSubjectReview response = api.createPodSecurityPolicySelfSubjectReviewForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodSecurityPolicySubjectReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPodSecurityPolicySubjectReviewForAllNamespacesTest() throws ApiException {
        V1PodSecurityPolicySubjectReview body = null;
        String pretty = null;
        // V1PodSecurityPolicySubjectReview response = api.createPodSecurityPolicySubjectReviewForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPodTemplateForAllNamespacesTest() throws ApiException {
        V1PodTemplate body = null;
        String pretty = null;
        // V1PodTemplate response = api.createPodTemplateForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPolicyBindingForAllNamespacesTest() throws ApiException {
        V1PolicyBinding body = null;
        String pretty = null;
        // V1PolicyBinding response = api.createPolicyBindingForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPolicyForAllNamespacesTest() throws ApiException {
        V1Policy body = null;
        String pretty = null;
        // V1Policy response = api.createPolicyForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        V1Project body = null;
        String pretty = null;
        // V1Project response = api.createProject(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ProjectRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectRequestTest() throws ApiException {
        V1ProjectRequest body = null;
        String pretty = null;
        // V1ProjectRequest response = api.createProjectRequest(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createReplicaSetForAllNamespacesTest() throws ApiException {
        V1beta1ReplicaSet body = null;
        String pretty = null;
        // V1beta1ReplicaSet response = api.createReplicaSetForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createReplicationControllerForAllNamespacesTest() throws ApiException {
        V1ReplicationController body = null;
        String pretty = null;
        // V1ReplicationController response = api.createReplicationControllerForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ResourceAccessReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createResourceAccessReviewForAllNamespacesTest() throws ApiException {
        V1ResourceAccessReview body = null;
        String pretty = null;
        // V1ResourceAccessReview response = api.createResourceAccessReviewForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createResourceQuotaForAllNamespacesTest() throws ApiException {
        V1ResourceQuota body = null;
        String pretty = null;
        // V1ResourceQuota response = api.createResourceQuotaForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a RoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRoleBindingForAllNamespacesTest() throws ApiException {
        V1RoleBinding body = null;
        String pretty = null;
        // V1RoleBinding response = api.createRoleBindingForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRoleForAllNamespacesTest() throws ApiException {
        V1Role body = null;
        String pretty = null;
        // V1Role response = api.createRoleForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRouteForAllNamespacesTest() throws ApiException {
        V1Route body = null;
        String pretty = null;
        // V1Route response = api.createRouteForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createScheduledJobForAllNamespacesTest() throws ApiException {
        V2alpha1ScheduledJob body = null;
        String pretty = null;
        // V2alpha1ScheduledJob response = api.createScheduledJobForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecretForAllNamespacesTest() throws ApiException {
        V1Secret body = null;
        String pretty = null;
        // V1Secret response = api.createSecretForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecurityContextConstraintsTest() throws ApiException {
        V1SecurityContextConstraints body = null;
        String pretty = null;
        // V1SecurityContextConstraints response = api.createSecurityContextConstraints(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a SelfSubjectRulesReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSelfSubjectRulesReviewForAllNamespacesTest() throws ApiException {
        V1SelfSubjectRulesReview body = null;
        String pretty = null;
        // V1SelfSubjectRulesReview response = api.createSelfSubjectRulesReviewForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createServiceAccountForAllNamespacesTest() throws ApiException {
        V1ServiceAccount body = null;
        String pretty = null;
        // V1ServiceAccount response = api.createServiceAccountForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createServiceForAllNamespacesTest() throws ApiException {
        V1Service body = null;
        String pretty = null;
        // V1Service response = api.createServiceForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a StorageClass
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStorageClassTest() throws ApiException {
        V1beta1StorageClass body = null;
        String pretty = null;
        // V1beta1StorageClass response = api.createStorageClass(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a SubjectAccessReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubjectAccessReviewForAllNamespacesTest() throws ApiException {
        V1SubjectAccessReview body = null;
        String pretty = null;
        // V1SubjectAccessReview response = api.createSubjectAccessReviewForAllNamespaces(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createThirdPartyResourceTest() throws ApiException {
        V1beta1ThirdPartyResource body = null;
        String pretty = null;
        // V1beta1ThirdPartyResource response = api.createThirdPartyResource(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a TokenReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTokenReviewTest() throws ApiException {
        V1beta1TokenReview body = null;
        String pretty = null;
        // V1beta1TokenReview response = api.createTokenReview(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        V1User body = null;
        String pretty = null;
        // V1User response = api.createUser(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a UserIdentityMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserIdentityMappingTest() throws ApiException {
        V1UserIdentityMapping body = null;
        String pretty = null;
        // V1UserIdentityMapping response = api.createUserIdentityMapping(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a CertificateSigningRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCertificateSigningRequestTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteCertificateSigningRequest(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterNetworkTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteClusterNetwork(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterPolicyTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteClusterPolicy(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterPolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterPolicyBindingTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteClusterPolicyBinding(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterResourceQuotaTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteClusterResourceQuota(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterRole
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterRoleTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteClusterRole(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterRoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterRoleBindingTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteClusterRoleBinding(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteGroup(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHostSubnetTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteHostSubnet(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIdentityTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteIdentity(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteImageTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteImage(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ImageSignature
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteImageSignatureTest() throws ApiException {
        String name = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteImageSignature(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespaceTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespace(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedBuildTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedBuild(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedBuildConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedBuildConfig(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedConfigMap(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedDaemonSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedDeployment(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedDeploymentConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedDeploymentConfig(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedEgressNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedEgressNetworkPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedEndpoints(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedEvent(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedImageStreamTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedImageStream(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedImageStreamTagTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedImageStreamTag(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedIngress(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedLimitRange(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedNetworkPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedPersistentVolumeClaim(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedPetSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedPetSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedPod(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedPodDisruptionBudgetTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedPodDisruptionBudget(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedPodTemplate(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedPolicyBindingTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedPolicyBinding(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedReplicaSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedReplicationController(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedResourceQuota(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedRoleTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedRole(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a RoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedRoleBindingTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedRoleBinding(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedRouteTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedRoute(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedScheduledJobTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedScheduledJob(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedSecret(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedService(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedServiceAccount(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNamespacedTemplate(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetNamespaceTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNetNamespace(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteNode(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOAuthAccessTokenTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteOAuthAccessToken(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOAuthAuthorizeTokenTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteOAuthAuthorizeToken(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOAuthClientTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteOAuthClient(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOAuthClientAuthorizationTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteOAuthClientAuthorization(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePersistentVolumeTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deletePersistentVolume(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePodSecurityPolicyTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deletePodSecurityPolicy(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        String name = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteProject(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSecurityContextConstraintsTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteSecurityContextConstraints(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a StorageClass
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStorageClassTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteStorageClass(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteThirdPartyResourceTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteThirdPartyResource(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteUser(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a UserIdentityMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserIdentityMappingTest() throws ApiException {
        String name = null;
        String pretty = null;
        // UnversionedStatus response = api.deleteUserIdentityMapping(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of CertificateSigningRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionCertificateSigningRequestTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionCertificateSigningRequest(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionClusterNetworkTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionClusterNetwork(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ClusterPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionClusterPolicyTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionClusterPolicy(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ClusterPolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionClusterPolicyBindingTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionClusterPolicyBinding(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionClusterResourceQuotaTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionClusterResourceQuota(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionGroupTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionGroup(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionHostSubnetTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionHostSubnet(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionIdentityTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionIdentity(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionImageTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionImage(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespaceTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespace(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedBuildTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedBuild(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedBuildConfigTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedBuildConfig(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedConfigMapTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedConfigMap(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedDaemonSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedDaemonSet(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedDeploymentTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedDeployment(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedDeploymentConfigTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedDeploymentConfig(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedEgressNetworkPolicyTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedEgressNetworkPolicy(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedEndpointsTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedEndpoints(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedEventTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedEvent(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedImageStreamTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedImageStream(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedIngressTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedIngress(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedLimitRangeTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedLimitRange(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedNetworkPolicyTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedNetworkPolicy(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedPersistentVolumeClaimTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedPersistentVolumeClaim(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedPetSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedPetSet(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedPodTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedPod(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedPodDisruptionBudgetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedPodDisruptionBudget(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedPodTemplateTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedPodTemplate(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedPolicyTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedPolicy(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedPolicyBindingTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedPolicyBinding(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedReplicaSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedReplicaSet(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedReplicationControllerTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedReplicationController(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedResourceQuotaTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedResourceQuota(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedRouteTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedRoute(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedScheduledJobTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedScheduledJob(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedSecretTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedSecret(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedServiceAccountTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedServiceAccount(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNamespacedTemplateTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNamespacedTemplate(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNetNamespaceTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNetNamespace(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionNodeTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionNode(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionOAuthAccessTokenTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionOAuthAccessToken(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionOAuthAuthorizeTokenTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionOAuthAuthorizeToken(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionOAuthClientTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionOAuthClient(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionOAuthClientAuthorizationTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionOAuthClientAuthorization(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionPersistentVolumeTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionPersistentVolume(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionPodSecurityPolicyTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionPodSecurityPolicy(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionSecurityContextConstraintsTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionSecurityContextConstraints(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of StorageClass
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionStorageClassTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionStorageClass(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionThirdPartyResourceTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionThirdPartyResource(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletecollectionUserTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.deletecollectionUser(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind AppliedClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAppliedClusterResourceQuotaForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1AppliedClusterResourceQuotaList response = api.listAppliedClusterResourceQuotaForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBuildConfigForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1BuildConfigList response = api.listBuildConfigForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBuildForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1BuildList response = api.listBuildForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind CertificateSigningRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCertificateSigningRequestTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1alpha1CertificateSigningRequestList response = api.listCertificateSigningRequest(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterNetworkTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ClusterNetworkList response = api.listClusterNetwork(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ClusterPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterPolicyTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ClusterPolicyList response = api.listClusterPolicy(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ClusterPolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterPolicyBindingTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ClusterPolicyBindingList response = api.listClusterPolicyBinding(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterResourceQuotaTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ClusterResourceQuotaList response = api.listClusterResourceQuota(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterRole
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterRoleTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ClusterRoleList response = api.listClusterRole(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterRoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterRoleBindingTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ClusterRoleBindingList response = api.listClusterRoleBinding(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ComponentStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listComponentStatusTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ComponentStatusList response = api.listComponentStatus(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigMapForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ConfigMapList response = api.listConfigMapForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDaemonSetForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1DaemonSetList response = api.listDaemonSetForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDeploymentConfigForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1DeploymentConfigList response = api.listDeploymentConfigForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDeploymentForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1DeploymentList response = api.listDeploymentForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEgressNetworkPolicyForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1EgressNetworkPolicyList response = api.listEgressNetworkPolicyForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEndpointsForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1EndpointsList response = api.listEndpointsForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEventForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1EventList response = api.listEventForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listGroupTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1GroupList response = api.listGroup(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHostSubnetTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1HostSubnetList response = api.listHostSubnet(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIdentityTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1IdentityList response = api.listIdentity(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listImageTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ImageList response = api.listImage(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listImageStreamForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ImageStreamList response = api.listImageStreamForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listImageStreamTagForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ImageStreamTagList response = api.listImageStreamTagForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIngressForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1IngressList response = api.listIngressForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLimitRangeForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1LimitRangeList response = api.listLimitRangeForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespaceTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1NamespaceList response = api.listNamespace(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind AppliedClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedAppliedClusterResourceQuotaTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1AppliedClusterResourceQuotaList response = api.listNamespacedAppliedClusterResourceQuota(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedBuildTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1BuildList response = api.listNamespacedBuild(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedBuildConfigTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1BuildConfigList response = api.listNamespacedBuildConfig(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedConfigMapTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ConfigMapList response = api.listNamespacedConfigMap(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedDaemonSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1DaemonSetList response = api.listNamespacedDaemonSet(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedDeploymentTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1DeploymentList response = api.listNamespacedDeployment(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedDeploymentConfigTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1DeploymentConfigList response = api.listNamespacedDeploymentConfig(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedEgressNetworkPolicyTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1EgressNetworkPolicyList response = api.listNamespacedEgressNetworkPolicy(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedEndpointsTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1EndpointsList response = api.listNamespacedEndpoints(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedEventTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1EventList response = api.listNamespacedEvent(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedImageStreamTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ImageStreamList response = api.listNamespacedImageStream(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedImageStreamTagTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ImageStreamTagList response = api.listNamespacedImageStreamTag(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedIngressTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1IngressList response = api.listNamespacedIngress(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedLimitRangeTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1LimitRangeList response = api.listNamespacedLimitRange(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedNetworkPolicyTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1NetworkPolicyList response = api.listNamespacedNetworkPolicy(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedPersistentVolumeClaimTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1PersistentVolumeClaimList response = api.listNamespacedPersistentVolumeClaim(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedPetSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1alpha1PetSetList response = api.listNamespacedPetSet(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedPodTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1PodList response = api.listNamespacedPod(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedPodDisruptionBudgetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1alpha1PodDisruptionBudgetList response = api.listNamespacedPodDisruptionBudget(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedPodTemplateTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1PodTemplateList response = api.listNamespacedPodTemplate(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedPolicyTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1PolicyList response = api.listNamespacedPolicy(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedPolicyBindingTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1PolicyBindingList response = api.listNamespacedPolicyBinding(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedReplicaSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1ReplicaSetList response = api.listNamespacedReplicaSet(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedReplicationControllerTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ReplicationControllerList response = api.listNamespacedReplicationController(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedResourceQuotaTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ResourceQuotaList response = api.listNamespacedResourceQuota(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedRoleTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1RoleList response = api.listNamespacedRole(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind RoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedRoleBindingTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1RoleBindingList response = api.listNamespacedRoleBinding(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedRouteTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1RouteList response = api.listNamespacedRoute(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedScheduledJobTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V2alpha1ScheduledJobList response = api.listNamespacedScheduledJob(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedSecretTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1SecretList response = api.listNamespacedSecret(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedServiceTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ServiceList response = api.listNamespacedService(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedServiceAccountTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ServiceAccountList response = api.listNamespacedServiceAccount(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedTemplateTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1TemplateList response = api.listNamespacedTemplate(namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetNamespaceTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1NetNamespaceList response = api.listNetNamespace(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkPolicyForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1NetworkPolicyList response = api.listNetworkPolicyForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNodeTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1NodeList response = api.listNode(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOAuthAccessTokenTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1OAuthAccessTokenList response = api.listOAuthAccessToken(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOAuthAuthorizeTokenTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1OAuthAuthorizeTokenList response = api.listOAuthAuthorizeToken(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOAuthClientTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1OAuthClientList response = api.listOAuthClient(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOAuthClientAuthorizationTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1OAuthClientAuthorizationList response = api.listOAuthClientAuthorization(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPersistentVolumeTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1PersistentVolumeList response = api.listPersistentVolume(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPersistentVolumeClaimForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1PersistentVolumeClaimList response = api.listPersistentVolumeClaimForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPetSetForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1alpha1PetSetList response = api.listPetSetForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPodDisruptionBudgetForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1alpha1PodDisruptionBudgetList response = api.listPodDisruptionBudgetForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPodForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1PodList response = api.listPodForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPodSecurityPolicyTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1PodSecurityPolicyList response = api.listPodSecurityPolicy(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPodTemplateForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1PodTemplateList response = api.listPodTemplateForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPolicyBindingForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1PolicyBindingList response = api.listPolicyBindingForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPolicyForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1PolicyList response = api.listPolicyForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ProjectList response = api.listProject(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ProjectRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectRequestTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // UnversionedStatus response = api.listProjectRequest(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listReplicaSetForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1ReplicaSetList response = api.listReplicaSetForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listReplicationControllerForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ReplicationControllerList response = api.listReplicationControllerForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listResourceQuotaForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ResourceQuotaList response = api.listResourceQuotaForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind RoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRoleBindingForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1RoleBindingList response = api.listRoleBindingForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRoleForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1RoleList response = api.listRoleForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRouteForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1RouteList response = api.listRouteForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listScheduledJobForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V2alpha1ScheduledJobList response = api.listScheduledJobForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSecretForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1SecretList response = api.listSecretForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSecurityContextConstraintsTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1SecurityContextConstraintsList response = api.listSecurityContextConstraints(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceAccountForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ServiceAccountList response = api.listServiceAccountForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1ServiceList response = api.listServiceForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind StorageClass
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listStorageClassTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1StorageClassList response = api.listStorageClass(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTemplateForAllNamespacesTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1TemplateList response = api.listTemplateForAllNamespaces(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listThirdPartyResourceTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1beta1ThirdPartyResourceList response = api.listThirdPartyResource(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1UserList response = api.listUser(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oapiV1GetTest() throws ApiException {
        // api.oapiV1Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oapiV1NamespacesNamespaceDeploymentconfigsNameGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1DeploymentConfig response = api.oapiV1NamespacesNamespaceDeploymentconfigsNameGet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oapiV1NamespacesNamespaceDeploymentconfigsNameScaleGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1beta1Scale response = api.oapiV1NamespacesNamespaceDeploymentconfigsNameScaleGet(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oapiV1NamespacesNamespaceDeploymentconfigsNameScalePatchTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1Scale response = api.oapiV1NamespacesNamespaceDeploymentconfigsNameScalePatch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified Scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oapiV1NamespacesNamespaceDeploymentconfigsNameScalePutTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Scale body = null;
        String pretty = null;
        // V1beta1Scale response = api.oapiV1NamespacesNamespaceDeploymentconfigsNameScalePut(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oapiV1NamespacesNamespaceGeneratedeploymentconfigsNameGetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1DeploymentConfig response = api.oapiV1NamespacesNamespaceGeneratedeploymentconfigsNameGet(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oapiV1NamespacesNamespaceProcessedtemplatesPostTest() throws ApiException {
        V1Template body = null;
        String namespace = null;
        String pretty = null;
        // V1Template response = api.oapiV1NamespacesNamespaceProcessedtemplatesPost(body, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oapiV1NamespacesNamespaceTemplatesPostTest() throws ApiException {
        String namespace = null;
        V1Template body = null;
        String pretty = null;
        // V1Template response = api.oapiV1NamespacesNamespaceTemplatesPost(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oapiV1ProcessedtemplatesPostTest() throws ApiException {
        V1Template body = null;
        String pretty = null;
        // V1Template response = api.oapiV1ProcessedtemplatesPost(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oapiV1TemplatesPostTest() throws ApiException {
        V1Template body = null;
        String pretty = null;
        // V1Template response = api.oapiV1TemplatesPost(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified CertificateSigningRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCertificateSigningRequestTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1alpha1CertificateSigningRequest response = api.patchCertificateSigningRequest(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchClusterNetworkTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ClusterNetwork response = api.patchClusterNetwork(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchClusterPolicyTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ClusterPolicy response = api.patchClusterPolicy(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterPolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchClusterPolicyBindingTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ClusterPolicyBinding response = api.patchClusterPolicyBinding(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchClusterResourceQuotaTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ClusterResourceQuota response = api.patchClusterResourceQuota(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchClusterResourceQuotaStatusTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ClusterResourceQuota response = api.patchClusterResourceQuotaStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterRole
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchClusterRoleTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ClusterRole response = api.patchClusterRole(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterRoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchClusterRoleBindingTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ClusterRoleBinding response = api.patchClusterRoleBinding(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchGroupTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Group response = api.patchGroup(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHostSubnetTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1HostSubnet response = api.patchHostSubnet(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchIdentityTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Identity response = api.patchIdentity(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchImageTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Image response = api.patchImage(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespaceTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Namespace response = api.patchNamespace(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespaceStatusTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Namespace response = api.patchNamespaceStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedBuildTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Build response = api.patchNamespacedBuild(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedBuildConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1BuildConfig response = api.patchNamespacedBuildConfig(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ConfigMap response = api.patchNamespacedConfigMap(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1DaemonSet response = api.patchNamespacedDaemonSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedDaemonSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1DaemonSet response = api.patchNamespacedDaemonSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1Deployment response = api.patchNamespacedDeployment(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedDeploymentConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1DeploymentConfig response = api.patchNamespacedDeploymentConfig(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1Deployment response = api.patchNamespacedDeploymentStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedEgressNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1EgressNetworkPolicy response = api.patchNamespacedEgressNetworkPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Endpoints response = api.patchNamespacedEndpoints(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Event response = api.patchNamespacedEvent(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedImageStreamTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ImageStream response = api.patchNamespacedImageStream(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedImageStreamTagTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ImageStreamTag response = api.patchNamespacedImageStreamTag(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1Ingress response = api.patchNamespacedIngress(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedIngressStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1Ingress response = api.patchNamespacedIngressStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1LimitRange response = api.patchNamespacedLimitRange(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1NetworkPolicy response = api.patchNamespacedNetworkPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1PersistentVolumeClaim response = api.patchNamespacedPersistentVolumeClaim(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPersistentVolumeClaimStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1PersistentVolumeClaim response = api.patchNamespacedPersistentVolumeClaimStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPetSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1alpha1PetSet response = api.patchNamespacedPetSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPetSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1alpha1PetSet response = api.patchNamespacedPetSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Pod response = api.patchNamespacedPod(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPodDisruptionBudgetTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1alpha1PodDisruptionBudget response = api.patchNamespacedPodDisruptionBudget(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPodDisruptionBudgetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1alpha1PodDisruptionBudget response = api.patchNamespacedPodDisruptionBudgetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPodStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Pod response = api.patchNamespacedPodStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1PodTemplate response = api.patchNamespacedPodTemplate(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Policy response = api.patchNamespacedPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPolicyBindingTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1PolicyBinding response = api.patchNamespacedPolicyBinding(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1ReplicaSet response = api.patchNamespacedReplicaSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedReplicaSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1ReplicaSet response = api.patchNamespacedReplicaSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ReplicationController response = api.patchNamespacedReplicationController(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedReplicationControllerStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ReplicationController response = api.patchNamespacedReplicationControllerStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ResourceQuota response = api.patchNamespacedResourceQuota(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedResourceQuotaStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ResourceQuota response = api.patchNamespacedResourceQuotaStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedRoleTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Role response = api.patchNamespacedRole(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified RoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedRoleBindingTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1RoleBinding response = api.patchNamespacedRoleBinding(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedRouteTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Route response = api.patchNamespacedRoute(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedScheduledJobTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V2alpha1ScheduledJob response = api.patchNamespacedScheduledJob(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedScheduledJobStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V2alpha1ScheduledJob response = api.patchNamespacedScheduledJobStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Secret response = api.patchNamespacedSecret(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Service response = api.patchNamespacedService(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1ServiceAccount response = api.patchNamespacedServiceAccount(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedServiceStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Service response = api.patchNamespacedServiceStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Template response = api.patchNamespacedTemplate(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNetNamespaceTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1NetNamespace response = api.patchNetNamespace(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNodeTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Node response = api.patchNode(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNodeStatusTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Node response = api.patchNodeStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOAuthAccessTokenTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1OAuthAccessToken response = api.patchOAuthAccessToken(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOAuthAuthorizeTokenTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1OAuthAuthorizeToken response = api.patchOAuthAuthorizeToken(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOAuthClientTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1OAuthClient response = api.patchOAuthClient(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOAuthClientAuthorizationTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1OAuthClientAuthorization response = api.patchOAuthClientAuthorization(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchPersistentVolumeTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1PersistentVolume response = api.patchPersistentVolume(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchPersistentVolumeStatusTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1PersistentVolume response = api.patchPersistentVolumeStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchPodSecurityPolicyTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1PodSecurityPolicy response = api.patchPodSecurityPolicy(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchProjectTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1Project response = api.patchProject(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchSecurityContextConstraintsTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1SecurityContextConstraints response = api.patchSecurityContextConstraints(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified StorageClass
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchStorageClassTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1StorageClass response = api.patchStorageClass(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchThirdPartyResourceTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1beta1ThirdPartyResource response = api.patchThirdPartyResource(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1User response = api.patchUser(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified UserIdentityMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserIdentityMappingTest() throws ApiException {
        String name = null;
        UnversionedPatch body = null;
        String pretty = null;
        // V1UserIdentityMapping response = api.patchUserIdentityMapping(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy DELETE requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyDELETENamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.proxyDELETENamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy DELETE requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyDELETENamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.proxyDELETENamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy DELETE requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyDELETENamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.proxyDELETENamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy DELETE requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyDELETENamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.proxyDELETENamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy DELETE requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyDELETENodeTest() throws ApiException {
        String name = null;
        // api.proxyDELETENode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy DELETE requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyDELETENodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        // api.proxyDELETENodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy GET requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyGETNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.proxyGETNamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy GET requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyGETNamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.proxyGETNamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy GET requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyGETNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.proxyGETNamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy GET requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyGETNamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.proxyGETNamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy GET requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyGETNodeTest() throws ApiException {
        String name = null;
        // api.proxyGETNode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy GET requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyGETNodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        // api.proxyGETNodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy HEAD requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyHEADNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.proxyHEADNamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy HEAD requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyHEADNamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.proxyHEADNamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy HEAD requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyHEADNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.proxyHEADNamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy HEAD requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyHEADNamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.proxyHEADNamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy HEAD requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyHEADNodeTest() throws ApiException {
        String name = null;
        // api.proxyHEADNode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy HEAD requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyHEADNodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        // api.proxyHEADNodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy OPTIONS requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyOPTIONSNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.proxyOPTIONSNamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy OPTIONS requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyOPTIONSNamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.proxyOPTIONSNamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy OPTIONS requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyOPTIONSNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.proxyOPTIONSNamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy OPTIONS requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyOPTIONSNamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.proxyOPTIONSNamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy OPTIONS requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyOPTIONSNodeTest() throws ApiException {
        String name = null;
        // api.proxyOPTIONSNode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy OPTIONS requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyOPTIONSNodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        // api.proxyOPTIONSNodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy POST requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPOSTNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.proxyPOSTNamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy POST requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPOSTNamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.proxyPOSTNamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy POST requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPOSTNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.proxyPOSTNamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy POST requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPOSTNamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.proxyPOSTNamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy POST requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPOSTNodeTest() throws ApiException {
        String name = null;
        // api.proxyPOSTNode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy POST requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPOSTNodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        // api.proxyPOSTNodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PUT requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPUTNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.proxyPUTNamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PUT requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPUTNamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.proxyPUTNamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PUT requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPUTNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        // api.proxyPUTNamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PUT requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPUTNamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        // api.proxyPUTNamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PUT requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPUTNodeTest() throws ApiException {
        String name = null;
        // api.proxyPUTNode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PUT requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPUTNodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        // api.proxyPUTNodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified CertificateSigningRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCertificateSigningRequestTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1alpha1CertificateSigningRequest response = api.readCertificateSigningRequest(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readClusterNetworkTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1ClusterNetwork response = api.readClusterNetwork(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readClusterPolicyTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1ClusterPolicy response = api.readClusterPolicy(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterPolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readClusterPolicyBindingTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1ClusterPolicyBinding response = api.readClusterPolicyBinding(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readClusterResourceQuotaTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1ClusterResourceQuota response = api.readClusterResourceQuota(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readClusterResourceQuotaStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        // V1ClusterResourceQuota response = api.readClusterResourceQuotaStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterRole
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readClusterRoleTest() throws ApiException {
        String name = null;
        String pretty = null;
        // V1ClusterRole response = api.readClusterRole(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterRoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readClusterRoleBindingTest() throws ApiException {
        String name = null;
        String pretty = null;
        // V1ClusterRoleBinding response = api.readClusterRoleBinding(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ComponentStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readComponentStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        // V1ComponentStatus response = api.readComponentStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readGroupTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Group response = api.readGroup(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHostSubnetTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1HostSubnet response = api.readHostSubnet(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readIdentityTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Identity response = api.readIdentity(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readImageTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Image response = api.readImage(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespaceTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Namespace response = api.readNamespace(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespaceStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        // V1Namespace response = api.readNamespaceStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified AppliedClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedAppliedClusterResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1AppliedClusterResourceQuota response = api.readNamespacedAppliedClusterResourceQuota(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedBuildTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Build response = api.readNamespacedBuild(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedBuildConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1BuildConfig response = api.readNamespacedBuildConfig(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read log of the specified BuildLog
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedBuildLogLogTest() throws ApiException {
        String name = null;
        String namespace = null;
        String container = null;
        Boolean follow = null;
        Integer limitBytes = null;
        Boolean nowait = null;
        String pretty = null;
        Boolean previous = null;
        Integer sinceSeconds = null;
        String sinceTime = null;
        Integer tailLines = null;
        Boolean timestamps = null;
        Integer version = null;
        // V1BuildLog response = api.readNamespacedBuildLogLog(name, namespace, container, follow, limitBytes, nowait, pretty, previous, sinceSeconds, sinceTime, tailLines, timestamps, version);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1ConfigMap response = api.readNamespacedConfigMap(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1beta1DaemonSet response = api.readNamespacedDaemonSet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedDaemonSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1beta1DaemonSet response = api.readNamespacedDaemonSetStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1beta1Deployment response = api.readNamespacedDeployment(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read log of the specified DeploymentLog
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedDeploymentLogLogTest() throws ApiException {
        String name = null;
        String namespace = null;
        String container = null;
        Boolean follow = null;
        Integer limitBytes = null;
        Boolean nowait = null;
        String pretty = null;
        Boolean previous = null;
        Integer sinceSeconds = null;
        String sinceTime = null;
        Integer tailLines = null;
        Boolean timestamps = null;
        Integer version = null;
        // V1DeploymentLog response = api.readNamespacedDeploymentLogLog(name, namespace, container, follow, limitBytes, nowait, pretty, previous, sinceSeconds, sinceTime, tailLines, timestamps, version);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1beta1Deployment response = api.readNamespacedDeploymentStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedEgressNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1EgressNetworkPolicy response = api.readNamespacedEgressNetworkPolicy(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Endpoints response = api.readNamespacedEndpoints(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Event response = api.readNamespacedEvent(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedImageStreamTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1ImageStream response = api.readNamespacedImageStream(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ImageStreamImage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedImageStreamImageTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1ImageStreamImage response = api.readNamespacedImageStreamImage(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedImageStreamTagTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1ImageStreamTag response = api.readNamespacedImageStreamTag(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1beta1Ingress response = api.readNamespacedIngress(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedIngressStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1beta1Ingress response = api.readNamespacedIngressStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1LimitRange response = api.readNamespacedLimitRange(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1beta1NetworkPolicy response = api.readNamespacedNetworkPolicy(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1PersistentVolumeClaim response = api.readNamespacedPersistentVolumeClaim(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPersistentVolumeClaimStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1PersistentVolumeClaim response = api.readNamespacedPersistentVolumeClaimStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPetSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1alpha1PetSet response = api.readNamespacedPetSet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPetSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1alpha1PetSet response = api.readNamespacedPetSetStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Pod response = api.readNamespacedPod(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPodDisruptionBudgetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1alpha1PodDisruptionBudget response = api.readNamespacedPodDisruptionBudget(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPodDisruptionBudgetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1alpha1PodDisruptionBudget response = api.readNamespacedPodDisruptionBudgetStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read log of the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPodLogTest() throws ApiException {
        String name = null;
        String namespace = null;
        String container = null;
        Boolean follow = null;
        Integer limitBytes = null;
        String pretty = null;
        Boolean previous = null;
        Integer sinceSeconds = null;
        String sinceTime = null;
        Integer tailLines = null;
        Boolean timestamps = null;
        // V1Pod response = api.readNamespacedPodLog(name, namespace, container, follow, limitBytes, pretty, previous, sinceSeconds, sinceTime, tailLines, timestamps);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPodStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1Pod response = api.readNamespacedPodStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1PodTemplate response = api.readNamespacedPodTemplate(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Policy response = api.readNamespacedPolicy(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPolicyBindingTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1PolicyBinding response = api.readNamespacedPolicyBinding(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1beta1ReplicaSet response = api.readNamespacedReplicaSet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedReplicaSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1beta1ReplicaSet response = api.readNamespacedReplicaSetStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1ReplicationController response = api.readNamespacedReplicationController(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedReplicationControllerStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1ReplicationController response = api.readNamespacedReplicationControllerStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1ResourceQuota response = api.readNamespacedResourceQuota(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedResourceQuotaStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1ResourceQuota response = api.readNamespacedResourceQuotaStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedRoleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1Role response = api.readNamespacedRole(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified RoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedRoleBindingTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1RoleBinding response = api.readNamespacedRoleBinding(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedRouteTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Route response = api.readNamespacedRoute(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedScheduledJobTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V2alpha1ScheduledJob response = api.readNamespacedScheduledJob(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedScheduledJobStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V2alpha1ScheduledJob response = api.readNamespacedScheduledJobStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Secret response = api.readNamespacedSecret(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read secrets of the specified SecretList
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedSecretListSecretsTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // V1SecretList response = api.readNamespacedSecretListSecrets(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Service response = api.readNamespacedService(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1ServiceAccount response = api.readNamespacedServiceAccount(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedServiceStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1Service response = api.readNamespacedServiceStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Template response = api.readNamespacedTemplate(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNetNamespaceTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1NetNamespace response = api.readNetNamespace(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1Node response = api.readNode(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        // V1Node response = api.readNodeStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOAuthAccessTokenTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1OAuthAccessToken response = api.readOAuthAccessToken(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOAuthAuthorizeTokenTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1OAuthAuthorizeToken response = api.readOAuthAuthorizeToken(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOAuthClientTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1OAuthClient response = api.readOAuthClient(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOAuthClientAuthorizationTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1OAuthClientAuthorization response = api.readOAuthClientAuthorization(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPersistentVolumeTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1PersistentVolume response = api.readPersistentVolume(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPersistentVolumeStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        // V1PersistentVolume response = api.readPersistentVolumeStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPodSecurityPolicyTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1beta1PodSecurityPolicy response = api.readPodSecurityPolicy(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProjectTest() throws ApiException {
        String name = null;
        String pretty = null;
        // V1Project response = api.readProject(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readSecurityContextConstraintsTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1SecurityContextConstraints response = api.readSecurityContextConstraints(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified StorageClass
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readStorageClassTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1beta1StorageClass response = api.readStorageClass(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readThirdPartyResourceTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1beta1ThirdPartyResource response = api.readThirdPartyResource(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUserTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        // V1User response = api.readUser(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified UserIdentityMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUserIdentityMappingTest() throws ApiException {
        String name = null;
        String pretty = null;
        // V1UserIdentityMapping response = api.readUserIdentityMapping(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified CertificateSigningRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCertificateSigningRequestTest() throws ApiException {
        String name = null;
        V1alpha1CertificateSigningRequest body = null;
        String pretty = null;
        // V1alpha1CertificateSigningRequest response = api.replaceCertificateSigningRequest(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace approval of the specified CertificateSigningRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCertificateSigningRequestApprovalTest() throws ApiException {
        V1alpha1CertificateSigningRequest body = null;
        String name = null;
        String pretty = null;
        // V1alpha1CertificateSigningRequest response = api.replaceCertificateSigningRequestApproval(body, name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified CertificateSigningRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCertificateSigningRequestStatusTest() throws ApiException {
        V1alpha1CertificateSigningRequest body = null;
        String name = null;
        String pretty = null;
        // V1alpha1CertificateSigningRequest response = api.replaceCertificateSigningRequestStatus(body, name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceClusterNetworkTest() throws ApiException {
        String name = null;
        V1ClusterNetwork body = null;
        String pretty = null;
        // V1ClusterNetwork response = api.replaceClusterNetwork(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceClusterPolicyTest() throws ApiException {
        String name = null;
        V1ClusterPolicy body = null;
        String pretty = null;
        // V1ClusterPolicy response = api.replaceClusterPolicy(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterPolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceClusterPolicyBindingTest() throws ApiException {
        String name = null;
        V1ClusterPolicyBinding body = null;
        String pretty = null;
        // V1ClusterPolicyBinding response = api.replaceClusterPolicyBinding(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceClusterResourceQuotaTest() throws ApiException {
        String name = null;
        V1ClusterResourceQuota body = null;
        String pretty = null;
        // V1ClusterResourceQuota response = api.replaceClusterResourceQuota(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceClusterResourceQuotaStatusTest() throws ApiException {
        String name = null;
        V1ClusterResourceQuota body = null;
        String pretty = null;
        // V1ClusterResourceQuota response = api.replaceClusterResourceQuotaStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterRole
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceClusterRoleTest() throws ApiException {
        String name = null;
        V1ClusterRole body = null;
        String pretty = null;
        // V1ClusterRole response = api.replaceClusterRole(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterRoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceClusterRoleBindingTest() throws ApiException {
        String name = null;
        V1ClusterRoleBinding body = null;
        String pretty = null;
        // V1ClusterRoleBinding response = api.replaceClusterRoleBinding(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceGroupTest() throws ApiException {
        String name = null;
        V1Group body = null;
        String pretty = null;
        // V1Group response = api.replaceGroup(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHostSubnetTest() throws ApiException {
        String name = null;
        V1HostSubnet body = null;
        String pretty = null;
        // V1HostSubnet response = api.replaceHostSubnet(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceIdentityTest() throws ApiException {
        String name = null;
        V1Identity body = null;
        String pretty = null;
        // V1Identity response = api.replaceIdentity(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceImageTest() throws ApiException {
        String name = null;
        V1Image body = null;
        String pretty = null;
        // V1Image response = api.replaceImage(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespaceTest() throws ApiException {
        String name = null;
        V1Namespace body = null;
        String pretty = null;
        // V1Namespace response = api.replaceNamespace(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace finalize of the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespaceFinalizeTest() throws ApiException {
        V1Namespace body = null;
        String name = null;
        String pretty = null;
        // V1Namespace response = api.replaceNamespaceFinalize(body, name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespaceStatusTest() throws ApiException {
        String name = null;
        V1Namespace body = null;
        String pretty = null;
        // V1Namespace response = api.replaceNamespaceStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedBuildTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Build body = null;
        String pretty = null;
        // V1Build response = api.replaceNamespacedBuild(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedBuildConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1BuildConfig body = null;
        String pretty = null;
        // V1BuildConfig response = api.replaceNamespacedBuildConfig(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace details of the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedBuildDetailsTest() throws ApiException {
        V1Build body = null;
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1Build response = api.replaceNamespacedBuildDetails(body, name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ConfigMap body = null;
        String pretty = null;
        // V1ConfigMap response = api.replaceNamespacedConfigMap(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1DaemonSet body = null;
        String pretty = null;
        // V1beta1DaemonSet response = api.replaceNamespacedDaemonSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedDaemonSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1DaemonSet body = null;
        String pretty = null;
        // V1beta1DaemonSet response = api.replaceNamespacedDaemonSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Deployment body = null;
        String pretty = null;
        // V1beta1Deployment response = api.replaceNamespacedDeployment(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedDeploymentConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeploymentConfig body = null;
        String pretty = null;
        // V1DeploymentConfig response = api.replaceNamespacedDeploymentConfig(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedDeploymentConfigStatusTest() throws ApiException {
        V1DeploymentConfig body = null;
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1DeploymentConfig response = api.replaceNamespacedDeploymentConfigStatus(body, name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Deployment body = null;
        String pretty = null;
        // V1beta1Deployment response = api.replaceNamespacedDeploymentStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedEgressNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1EgressNetworkPolicy body = null;
        String pretty = null;
        // V1EgressNetworkPolicy response = api.replaceNamespacedEgressNetworkPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Endpoints body = null;
        String pretty = null;
        // V1Endpoints response = api.replaceNamespacedEndpoints(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Event body = null;
        String pretty = null;
        // V1Event response = api.replaceNamespacedEvent(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedImageStreamTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ImageStream body = null;
        String pretty = null;
        // V1ImageStream response = api.replaceNamespacedImageStream(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedImageStreamStatusTest() throws ApiException {
        V1ImageStream body = null;
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1ImageStream response = api.replaceNamespacedImageStreamStatus(body, name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedImageStreamTagTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ImageStreamTag body = null;
        String pretty = null;
        // V1ImageStreamTag response = api.replaceNamespacedImageStreamTag(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Ingress body = null;
        String pretty = null;
        // V1beta1Ingress response = api.replaceNamespacedIngress(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedIngressStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Ingress body = null;
        String pretty = null;
        // V1beta1Ingress response = api.replaceNamespacedIngressStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1LimitRange body = null;
        String pretty = null;
        // V1LimitRange response = api.replaceNamespacedLimitRange(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1NetworkPolicy body = null;
        String pretty = null;
        // V1beta1NetworkPolicy response = api.replaceNamespacedNetworkPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1PersistentVolumeClaim body = null;
        String pretty = null;
        // V1PersistentVolumeClaim response = api.replaceNamespacedPersistentVolumeClaim(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPersistentVolumeClaimStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1PersistentVolumeClaim body = null;
        String pretty = null;
        // V1PersistentVolumeClaim response = api.replaceNamespacedPersistentVolumeClaimStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPetSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1PetSet body = null;
        String pretty = null;
        // V1alpha1PetSet response = api.replaceNamespacedPetSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPetSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1PetSet body = null;
        String pretty = null;
        // V1alpha1PetSet response = api.replaceNamespacedPetSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Pod body = null;
        String pretty = null;
        // V1Pod response = api.replaceNamespacedPod(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPodDisruptionBudgetTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1PodDisruptionBudget body = null;
        String pretty = null;
        // V1alpha1PodDisruptionBudget response = api.replaceNamespacedPodDisruptionBudget(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPodDisruptionBudgetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1PodDisruptionBudget body = null;
        String pretty = null;
        // V1alpha1PodDisruptionBudget response = api.replaceNamespacedPodDisruptionBudgetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPodStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Pod body = null;
        String pretty = null;
        // V1Pod response = api.replaceNamespacedPodStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1PodTemplate body = null;
        String pretty = null;
        // V1PodTemplate response = api.replaceNamespacedPodTemplate(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Policy body = null;
        String pretty = null;
        // V1Policy response = api.replaceNamespacedPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPolicyBindingTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1PolicyBinding body = null;
        String pretty = null;
        // V1PolicyBinding response = api.replaceNamespacedPolicyBinding(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1ReplicaSet body = null;
        String pretty = null;
        // V1beta1ReplicaSet response = api.replaceNamespacedReplicaSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedReplicaSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1ReplicaSet body = null;
        String pretty = null;
        // V1beta1ReplicaSet response = api.replaceNamespacedReplicaSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ReplicationController body = null;
        String pretty = null;
        // V1ReplicationController response = api.replaceNamespacedReplicationController(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedReplicationControllerStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ReplicationController body = null;
        String pretty = null;
        // V1ReplicationController response = api.replaceNamespacedReplicationControllerStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ResourceQuota body = null;
        String pretty = null;
        // V1ResourceQuota response = api.replaceNamespacedResourceQuota(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedResourceQuotaStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ResourceQuota body = null;
        String pretty = null;
        // V1ResourceQuota response = api.replaceNamespacedResourceQuotaStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedRoleTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Role body = null;
        String pretty = null;
        // V1Role response = api.replaceNamespacedRole(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified RoleBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedRoleBindingTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1RoleBinding body = null;
        String pretty = null;
        // V1RoleBinding response = api.replaceNamespacedRoleBinding(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedRouteTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Route body = null;
        String pretty = null;
        // V1Route response = api.replaceNamespacedRoute(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedRouteStatusTest() throws ApiException {
        V1Route body = null;
        String name = null;
        String namespace = null;
        String pretty = null;
        // V1Route response = api.replaceNamespacedRouteStatus(body, name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedScheduledJobTest() throws ApiException {
        String name = null;
        String namespace = null;
        V2alpha1ScheduledJob body = null;
        String pretty = null;
        // V2alpha1ScheduledJob response = api.replaceNamespacedScheduledJob(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedScheduledJobStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V2alpha1ScheduledJob body = null;
        String pretty = null;
        // V2alpha1ScheduledJob response = api.replaceNamespacedScheduledJobStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Secret body = null;
        String pretty = null;
        // V1Secret response = api.replaceNamespacedSecret(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Service body = null;
        String pretty = null;
        // V1Service response = api.replaceNamespacedService(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ServiceAccount body = null;
        String pretty = null;
        // V1ServiceAccount response = api.replaceNamespacedServiceAccount(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedServiceStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Service body = null;
        String pretty = null;
        // V1Service response = api.replaceNamespacedServiceStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Template body = null;
        String pretty = null;
        // V1Template response = api.replaceNamespacedTemplate(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNetNamespaceTest() throws ApiException {
        String name = null;
        V1NetNamespace body = null;
        String pretty = null;
        // V1NetNamespace response = api.replaceNetNamespace(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNodeTest() throws ApiException {
        String name = null;
        V1Node body = null;
        String pretty = null;
        // V1Node response = api.replaceNode(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNodeStatusTest() throws ApiException {
        String name = null;
        V1Node body = null;
        String pretty = null;
        // V1Node response = api.replaceNodeStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOAuthAccessTokenTest() throws ApiException {
        String name = null;
        V1OAuthAccessToken body = null;
        String pretty = null;
        // V1OAuthAccessToken response = api.replaceOAuthAccessToken(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOAuthAuthorizeTokenTest() throws ApiException {
        String name = null;
        V1OAuthAuthorizeToken body = null;
        String pretty = null;
        // V1OAuthAuthorizeToken response = api.replaceOAuthAuthorizeToken(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOAuthClientTest() throws ApiException {
        String name = null;
        V1OAuthClient body = null;
        String pretty = null;
        // V1OAuthClient response = api.replaceOAuthClient(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOAuthClientAuthorizationTest() throws ApiException {
        String name = null;
        V1OAuthClientAuthorization body = null;
        String pretty = null;
        // V1OAuthClientAuthorization response = api.replaceOAuthClientAuthorization(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePersistentVolumeTest() throws ApiException {
        String name = null;
        V1PersistentVolume body = null;
        String pretty = null;
        // V1PersistentVolume response = api.replacePersistentVolume(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePersistentVolumeStatusTest() throws ApiException {
        String name = null;
        V1PersistentVolume body = null;
        String pretty = null;
        // V1PersistentVolume response = api.replacePersistentVolumeStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePodSecurityPolicyTest() throws ApiException {
        String name = null;
        V1beta1PodSecurityPolicy body = null;
        String pretty = null;
        // V1beta1PodSecurityPolicy response = api.replacePodSecurityPolicy(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceProjectTest() throws ApiException {
        String name = null;
        V1Project body = null;
        String pretty = null;
        // V1Project response = api.replaceProject(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSecurityContextConstraintsTest() throws ApiException {
        String name = null;
        V1SecurityContextConstraints body = null;
        String pretty = null;
        // V1SecurityContextConstraints response = api.replaceSecurityContextConstraints(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified StorageClass
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceStorageClassTest() throws ApiException {
        String name = null;
        V1beta1StorageClass body = null;
        String pretty = null;
        // V1beta1StorageClass response = api.replaceStorageClass(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceThirdPartyResourceTest() throws ApiException {
        String name = null;
        V1beta1ThirdPartyResource body = null;
        String pretty = null;
        // V1beta1ThirdPartyResource response = api.replaceThirdPartyResource(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceUserTest() throws ApiException {
        String name = null;
        V1User body = null;
        String pretty = null;
        // V1User response = api.replaceUser(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified UserIdentityMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceUserIdentityMappingTest() throws ApiException {
        String name = null;
        V1UserIdentityMapping body = null;
        String pretty = null;
        // V1UserIdentityMapping response = api.replaceUserIdentityMapping(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get the code version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionGetTest() throws ApiException {
        // api.versionGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get the code version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionOpenshiftGetTest() throws ApiException {
        // api.versionOpenshiftGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchBuildConfigListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchBuildConfigListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchBuildListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchBuildListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind CertificateSigningRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCertificateSigningRequestTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchCertificateSigningRequest(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of CertificateSigningRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCertificateSigningRequestListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchCertificateSigningRequestList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchClusterNetworkTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchClusterNetwork(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchClusterNetworkListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchClusterNetworkList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ClusterPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchClusterPolicyTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchClusterPolicy(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ClusterPolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchClusterPolicyBindingTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchClusterPolicyBinding(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ClusterPolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchClusterPolicyBindingListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchClusterPolicyBindingList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ClusterPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchClusterPolicyListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchClusterPolicyList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchClusterResourceQuotaTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchClusterResourceQuota(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ClusterResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchClusterResourceQuotaListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchClusterResourceQuotaList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchConfigMapListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchConfigMapListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchDaemonSetListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchDaemonSetListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchDeploymentConfigListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchDeploymentConfigListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchDeploymentListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchDeploymentListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchEgressNetworkPolicyListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchEgressNetworkPolicyListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchEndpointsListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchEndpointsListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchEventListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchEventListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchGroupTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchGroup(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchGroupListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchGroupList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchHostSubnetTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchHostSubnet(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchHostSubnetListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchHostSubnetList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchIdentityTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchIdentity(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchIdentityListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchIdentityList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchImageTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchImage(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchImageListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchImageList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchImageStreamListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchImageStreamListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchIngressListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchIngressListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchLimitRangeListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchLimitRangeListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespaceTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespace(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespaceListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespaceList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedBuildTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedBuild(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedBuildConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedBuildConfig(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedBuildConfigListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedBuildConfigList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedBuildListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedBuildList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedConfigMap(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedConfigMapListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedConfigMapList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedDaemonSet(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedDaemonSetListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedDaemonSetList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedDeployment(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedDeploymentConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedDeploymentConfig(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of DeploymentConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedDeploymentConfigListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedDeploymentConfigList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedDeploymentListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedDeploymentList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedEgressNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedEgressNetworkPolicy(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedEgressNetworkPolicyListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedEgressNetworkPolicyList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedEndpoints(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedEndpointsListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedEndpointsList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedEvent(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedEventListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedEventList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedImageStreamTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedImageStream(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedImageStreamListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedImageStreamList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedIngress(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedIngressListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedIngressList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedLimitRange(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedLimitRangeListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedLimitRangeList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedNetworkPolicy(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedNetworkPolicyListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedNetworkPolicyList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPersistentVolumeClaim(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPersistentVolumeClaimListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPersistentVolumeClaimList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPetSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPetSet(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPetSetListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPetSetList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPod(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPodDisruptionBudgetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPodDisruptionBudget(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPodDisruptionBudgetListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPodDisruptionBudgetList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPodListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPodList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPodTemplate(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPodTemplateListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPodTemplateList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPolicy(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind PolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPolicyBindingTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPolicyBinding(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPolicyBindingListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPolicyBindingList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedPolicyListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedPolicyList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedReplicaSet(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedReplicaSetListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedReplicaSetList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedReplicationController(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedReplicationControllerListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedReplicationControllerList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedResourceQuota(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedResourceQuotaListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedResourceQuotaList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedRouteTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedRoute(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedRouteListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedRouteList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedScheduledJobTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedScheduledJob(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedScheduledJobListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedScheduledJobList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedSecret(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedSecretListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedSecretList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedService(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedServiceAccount(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedServiceAccountListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedServiceAccountList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedServiceListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedServiceList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedTemplate(name, namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNamespacedTemplateListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNamespacedTemplateList(namespace, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNetNamespaceTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNetNamespace(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNetNamespaceListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNetNamespaceList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNetworkPolicyListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNetworkPolicyListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNodeTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNode(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchNodeListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchNodeList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOAuthAccessTokenTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchOAuthAccessToken(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOAuthAccessTokenListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchOAuthAccessTokenList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOAuthAuthorizeTokenTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchOAuthAuthorizeToken(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOAuthAuthorizeTokenListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchOAuthAuthorizeTokenList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOAuthClientTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchOAuthClient(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOAuthClientAuthorizationTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchOAuthClientAuthorization(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOAuthClientAuthorizationListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchOAuthClientAuthorizationList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOAuthClientListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchOAuthClientList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchPersistentVolumeTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchPersistentVolume(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchPersistentVolumeClaimListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchPersistentVolumeClaimListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchPersistentVolumeListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchPersistentVolumeList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PetSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchPetSetListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchPetSetListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PodDisruptionBudget
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchPodDisruptionBudgetListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchPodDisruptionBudgetListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchPodListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchPodListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchPodSecurityPolicyTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchPodSecurityPolicy(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchPodSecurityPolicyListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchPodSecurityPolicyList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchPodTemplateListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchPodTemplateListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PolicyBinding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchPolicyBindingListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchPolicyBindingListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchPolicyListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchPolicyListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchProjectTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchProject(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchProjectListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchProjectList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchReplicaSetListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchReplicaSetListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchReplicationControllerListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchReplicationControllerListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchResourceQuotaListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchResourceQuotaListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchRouteListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchRouteListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ScheduledJob
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchScheduledJobListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchScheduledJobListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchSecretListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchSecretListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchSecurityContextConstraintsTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchSecurityContextConstraints(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchSecurityContextConstraintsListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchSecurityContextConstraintsList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchServiceAccountListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchServiceAccountListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchServiceListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchServiceListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind StorageClass
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchStorageClassTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchStorageClass(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of StorageClass
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchStorageClassListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchStorageClassList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchTemplateListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchTemplateListForAllNamespaces(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchThirdPartyResourceTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchThirdPartyResource(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchThirdPartyResourceListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchThirdPartyResourceList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchUserTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchUser(name, fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchUserListTest() throws ApiException {
        String fieldSelector = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        // VersionedEvent response = api.watchUserList(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
}
