/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'unversioned.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.openshift.restclient.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.openshift.restclient.model.V1ObjectMeta;
import com.openshift.restclient.model.V1SignatureCondition;
import com.openshift.restclient.model.V1SignatureIssuer;
import com.openshift.restclient.model.V1SignatureSubject;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;


/**
 * ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature&#39;s content by the server. They serve just an informative purpose.
 */
@ApiModel(description = "ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose.")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-10-24T16:19:28.908-04:00")
public class V1ImageSignature   {
  @SerializedName("apiVersion")
  private String apiVersion = null;

  @SerializedName("conditions")
  private List<V1SignatureCondition> conditions = new ArrayList<V1SignatureCondition>();

  @SerializedName("content")
  private String content = null;

  @SerializedName("created")
  private String created = null;

  @SerializedName("imageIdentity")
  private String imageIdentity = null;

  @SerializedName("issuedBy")
  private V1SignatureIssuer issuedBy = null;

  @SerializedName("issuedTo")
  private V1SignatureSubject issuedTo = null;

  @SerializedName("kind")
  private String kind = null;

  @SerializedName("metadata")
  private V1ObjectMeta metadata = null;

  @SerializedName("signedClaims")
  private Object signedClaims = null;

  @SerializedName("type")
  private String type = null;

  public V1ImageSignature apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

   /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.4/docs/devel/api-conventions.md#resources
   * @return apiVersion
  **/
  @ApiModelProperty(example = "null", value = "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.4/docs/devel/api-conventions.md#resources")
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }

  public V1ImageSignature conditions(List<V1SignatureCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public V1ImageSignature addConditionsItem(V1SignatureCondition conditionsItem) {
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Conditions represent the latest available observations of a signature's current state.
   * @return conditions
  **/
  @ApiModelProperty(example = "null", value = "Conditions represent the latest available observations of a signature's current state.")
  public List<V1SignatureCondition> getConditions() {
    return conditions;
  }

  public void setConditions(List<V1SignatureCondition> conditions) {
    this.conditions = conditions;
  }

  public V1ImageSignature content(String content) {
    this.content = content;
    return this;
  }

   /**
   * Required: An opaque binary string which is an image's signature.
   * @return content
  **/
  @ApiModelProperty(example = "null", required = true, value = "Required: An opaque binary string which is an image's signature.")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public V1ImageSignature created(String created) {
    this.created = created;
    return this;
  }

   /**
   * If specified, it is the time of signature's creation.
   * @return created
  **/
  @ApiModelProperty(example = "null", value = "If specified, it is the time of signature's creation.")
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }

  public V1ImageSignature imageIdentity(String imageIdentity) {
    this.imageIdentity = imageIdentity;
    return this;
  }

   /**
   * A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. \"registry.access.redhat.com/rhel7/rhel:7.2\").
   * @return imageIdentity
  **/
  @ApiModelProperty(example = "null", value = "A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. \"registry.access.redhat.com/rhel7/rhel:7.2\").")
  public String getImageIdentity() {
    return imageIdentity;
  }

  public void setImageIdentity(String imageIdentity) {
    this.imageIdentity = imageIdentity;
  }

  public V1ImageSignature issuedBy(V1SignatureIssuer issuedBy) {
    this.issuedBy = issuedBy;
    return this;
  }

   /**
   * Get issuedBy
   * @return issuedBy
  **/
  @ApiModelProperty(example = "null", value = "")
  public V1SignatureIssuer getIssuedBy() {
    return issuedBy;
  }

  public void setIssuedBy(V1SignatureIssuer issuedBy) {
    this.issuedBy = issuedBy;
  }

  public V1ImageSignature issuedTo(V1SignatureSubject issuedTo) {
    this.issuedTo = issuedTo;
    return this;
  }

   /**
   * Get issuedTo
   * @return issuedTo
  **/
  @ApiModelProperty(example = "null", value = "")
  public V1SignatureSubject getIssuedTo() {
    return issuedTo;
  }

  public void setIssuedTo(V1SignatureSubject issuedTo) {
    this.issuedTo = issuedTo;
  }

  public V1ImageSignature kind(String kind) {
    this.kind = kind;
    return this;
  }

   /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.4/docs/devel/api-conventions.md#types-kinds
   * @return kind
  **/
  @ApiModelProperty(example = "null", value = "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.4/docs/devel/api-conventions.md#types-kinds")
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }

  public V1ImageSignature metadata(V1ObjectMeta metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @ApiModelProperty(example = "null", value = "")
  public V1ObjectMeta getMetadata() {
    return metadata;
  }

  public void setMetadata(V1ObjectMeta metadata) {
    this.metadata = metadata;
  }

  public V1ImageSignature signedClaims(Object signedClaims) {
    this.signedClaims = signedClaims;
    return this;
  }

   /**
   * Contains claims from the signature.
   * @return signedClaims
  **/
  @ApiModelProperty(example = "null", value = "Contains claims from the signature.")
  public Object getSignedClaims() {
    return signedClaims;
  }

  public void setSignedClaims(Object signedClaims) {
    this.signedClaims = signedClaims;
  }

  public V1ImageSignature type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Required: Describes a type of stored blob.
   * @return type
  **/
  @ApiModelProperty(example = "null", required = true, value = "Required: Describes a type of stored blob.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ImageSignature v1ImageSignature = (V1ImageSignature) o;
    return Objects.equals(this.apiVersion, v1ImageSignature.apiVersion) &&
        Objects.equals(this.conditions, v1ImageSignature.conditions) &&
        Objects.equals(this.content, v1ImageSignature.content) &&
        Objects.equals(this.created, v1ImageSignature.created) &&
        Objects.equals(this.imageIdentity, v1ImageSignature.imageIdentity) &&
        Objects.equals(this.issuedBy, v1ImageSignature.issuedBy) &&
        Objects.equals(this.issuedTo, v1ImageSignature.issuedTo) &&
        Objects.equals(this.kind, v1ImageSignature.kind) &&
        Objects.equals(this.metadata, v1ImageSignature.metadata) &&
        Objects.equals(this.signedClaims, v1ImageSignature.signedClaims) &&
        Objects.equals(this.type, v1ImageSignature.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, conditions, content, created, imageIdentity, issuedBy, issuedTo, kind, metadata, signedClaims, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ImageSignature {\n");
    
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    imageIdentity: ").append(toIndentedString(imageIdentity)).append("\n");
    sb.append("    issuedBy: ").append(toIndentedString(issuedBy)).append("\n");
    sb.append("    issuedTo: ").append(toIndentedString(issuedTo)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    signedClaims: ").append(toIndentedString(signedClaims)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

