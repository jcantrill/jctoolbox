/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'unversioned.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.openshift.restclient.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.openshift.restclient.model.TimeDuration;
import com.openshift.restclient.model.V1ObjectReference;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * BuildStatus contains the status of a build
 */
@ApiModel(description = "BuildStatus contains the status of a build")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-10-24T16:19:28.908-04:00")
public class V1BuildStatus   {
  @SerializedName("cancelled")
  private Boolean cancelled = null;

  @SerializedName("completionTimestamp")
  private String completionTimestamp = null;

  @SerializedName("config")
  private V1ObjectReference config = null;

  @SerializedName("duration")
  private TimeDuration duration = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("outputDockerImageReference")
  private String outputDockerImageReference = null;

  @SerializedName("phase")
  private String phase = null;

  @SerializedName("reason")
  private String reason = null;

  @SerializedName("startTimestamp")
  private String startTimestamp = null;

  public V1BuildStatus cancelled(Boolean cancelled) {
    this.cancelled = cancelled;
    return this;
  }

   /**
   * cancelled describes if a cancel event was triggered for the build.
   * @return cancelled
  **/
  @ApiModelProperty(example = "null", value = "cancelled describes if a cancel event was triggered for the build.")
  public Boolean getCancelled() {
    return cancelled;
  }

  public void setCancelled(Boolean cancelled) {
    this.cancelled = cancelled;
  }

  public V1BuildStatus completionTimestamp(String completionTimestamp) {
    this.completionTimestamp = completionTimestamp;
    return this;
  }

   /**
   * completionTimestamp is a timestamp representing the server time when this Build was finished, whether that build failed or succeeded.  It reflects the time at which the Pod running the Build terminated. It is represented in RFC3339 form and is in UTC.
   * @return completionTimestamp
  **/
  @ApiModelProperty(example = "null", value = "completionTimestamp is a timestamp representing the server time when this Build was finished, whether that build failed or succeeded.  It reflects the time at which the Pod running the Build terminated. It is represented in RFC3339 form and is in UTC.")
  public String getCompletionTimestamp() {
    return completionTimestamp;
  }

  public void setCompletionTimestamp(String completionTimestamp) {
    this.completionTimestamp = completionTimestamp;
  }

  public V1BuildStatus config(V1ObjectReference config) {
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @ApiModelProperty(example = "null", value = "")
  public V1ObjectReference getConfig() {
    return config;
  }

  public void setConfig(V1ObjectReference config) {
    this.config = config;
  }

  public V1BuildStatus duration(TimeDuration duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @ApiModelProperty(example = "null", value = "")
  public TimeDuration getDuration() {
    return duration;
  }

  public void setDuration(TimeDuration duration) {
    this.duration = duration;
  }

  public V1BuildStatus message(String message) {
    this.message = message;
    return this;
  }

   /**
   * message is a human-readable message indicating details about why the build has this status.
   * @return message
  **/
  @ApiModelProperty(example = "null", value = "message is a human-readable message indicating details about why the build has this status.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public V1BuildStatus outputDockerImageReference(String outputDockerImageReference) {
    this.outputDockerImageReference = outputDockerImageReference;
    return this;
  }

   /**
   * outputDockerImageReference contains a reference to the Docker image that will be built by this build. Its value is computed from Build.Spec.Output.To, and should include the registry address, so that it can be used to push and pull the image.
   * @return outputDockerImageReference
  **/
  @ApiModelProperty(example = "null", value = "outputDockerImageReference contains a reference to the Docker image that will be built by this build. Its value is computed from Build.Spec.Output.To, and should include the registry address, so that it can be used to push and pull the image.")
  public String getOutputDockerImageReference() {
    return outputDockerImageReference;
  }

  public void setOutputDockerImageReference(String outputDockerImageReference) {
    this.outputDockerImageReference = outputDockerImageReference;
  }

  public V1BuildStatus phase(String phase) {
    this.phase = phase;
    return this;
  }

   /**
   * phase is the point in the build lifecycle.
   * @return phase
  **/
  @ApiModelProperty(example = "null", required = true, value = "phase is the point in the build lifecycle.")
  public String getPhase() {
    return phase;
  }

  public void setPhase(String phase) {
    this.phase = phase;
  }

  public V1BuildStatus reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
   * @return reason
  **/
  @ApiModelProperty(example = "null", value = "reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public V1BuildStatus startTimestamp(String startTimestamp) {
    this.startTimestamp = startTimestamp;
    return this;
  }

   /**
   * startTimestamp is a timestamp representing the server time when this Build started running in a Pod. It is represented in RFC3339 form and is in UTC.
   * @return startTimestamp
  **/
  @ApiModelProperty(example = "null", value = "startTimestamp is a timestamp representing the server time when this Build started running in a Pod. It is represented in RFC3339 form and is in UTC.")
  public String getStartTimestamp() {
    return startTimestamp;
  }

  public void setStartTimestamp(String startTimestamp) {
    this.startTimestamp = startTimestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1BuildStatus v1BuildStatus = (V1BuildStatus) o;
    return Objects.equals(this.cancelled, v1BuildStatus.cancelled) &&
        Objects.equals(this.completionTimestamp, v1BuildStatus.completionTimestamp) &&
        Objects.equals(this.config, v1BuildStatus.config) &&
        Objects.equals(this.duration, v1BuildStatus.duration) &&
        Objects.equals(this.message, v1BuildStatus.message) &&
        Objects.equals(this.outputDockerImageReference, v1BuildStatus.outputDockerImageReference) &&
        Objects.equals(this.phase, v1BuildStatus.phase) &&
        Objects.equals(this.reason, v1BuildStatus.reason) &&
        Objects.equals(this.startTimestamp, v1BuildStatus.startTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancelled, completionTimestamp, config, duration, message, outputDockerImageReference, phase, reason, startTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1BuildStatus {\n");
    
    sb.append("    cancelled: ").append(toIndentedString(cancelled)).append("\n");
    sb.append("    completionTimestamp: ").append(toIndentedString(completionTimestamp)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    outputDockerImageReference: ").append(toIndentedString(outputDockerImageReference)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

