/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'unversioned.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.openshift.restclient.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;


/**
 * A BuildPostCommitSpec holds a build post commit hook specification. The hook executes a command in a temporary container running the build output image, immediately after the last layer of the image is committed and before the image is pushed to a registry. The command is executed with the current working directory ($PWD) set to the image&#39;s WORKDIR.  The build will be marked as failed if the hook execution fails. It will fail if the script or command return a non-zero exit code, or if there is any other error related to starting the temporary container.  There are five different ways to configure the hook. As an example, all forms below are equivalent and will execute &#x60;rake test --verbose&#x60;.  1. Shell script:         \&quot;postCommit\&quot;: {          \&quot;script\&quot;: \&quot;rake test --verbose\&quot;,        }      The above is a convenient form which is equivalent to:         \&quot;postCommit\&quot;: {          \&quot;command\&quot;: [\&quot;/bin/sh\&quot;, \&quot;-ic\&quot;],          \&quot;args\&quot;:    [\&quot;rake test --verbose\&quot;]        }  2. A command as the image entrypoint:         \&quot;postCommit\&quot;: {          \&quot;commit\&quot;: [\&quot;rake\&quot;, \&quot;test\&quot;, \&quot;--verbose\&quot;]        }      Command overrides the image entrypoint in the exec form, as documented in     Docker: https://docs.docker.com/engine/reference/builder/#entrypoint.  3. Pass arguments to the default entrypoint:         \&quot;postCommit\&quot;: {         \&quot;args\&quot;: [\&quot;rake\&quot;, \&quot;test\&quot;, \&quot;--verbose\&quot;]        }      This form is only useful if the image entrypoint can handle arguments.  4. Shell script with arguments:         \&quot;postCommit\&quot;: {          \&quot;script\&quot;: \&quot;rake test $1\&quot;,          \&quot;args\&quot;:   [\&quot;--verbose\&quot;]        }      This form is useful if you need to pass arguments that would otherwise be     hard to quote properly in the shell script. In the script, $0 will be     \&quot;/bin/sh\&quot; and $1, $2, etc, are the positional arguments from Args.  5. Command with arguments:         \&quot;postCommit\&quot;: {          \&quot;command\&quot;: [\&quot;rake\&quot;, \&quot;test\&quot;],          \&quot;args\&quot;:    [\&quot;--verbose\&quot;]        }      This form is equivalent to appending the arguments to the Command slice.  It is invalid to provide both Script and Command simultaneously. If none of the fields are specified, the hook is not executed.
 */
@ApiModel(description = "A BuildPostCommitSpec holds a build post commit hook specification. The hook executes a command in a temporary container running the build output image, immediately after the last layer of the image is committed and before the image is pushed to a registry. The command is executed with the current working directory ($PWD) set to the image's WORKDIR.  The build will be marked as failed if the hook execution fails. It will fail if the script or command return a non-zero exit code, or if there is any other error related to starting the temporary container.  There are five different ways to configure the hook. As an example, all forms below are equivalent and will execute `rake test --verbose`.  1. Shell script:         \"postCommit\": {          \"script\": \"rake test --verbose\",        }      The above is a convenient form which is equivalent to:         \"postCommit\": {          \"command\": [\"/bin/sh\", \"-ic\"],          \"args\":    [\"rake test --verbose\"]        }  2. A command as the image entrypoint:         \"postCommit\": {          \"commit\": [\"rake\", \"test\", \"--verbose\"]        }      Command overrides the image entrypoint in the exec form, as documented in     Docker: https://docs.docker.com/engine/reference/builder/#entrypoint.  3. Pass arguments to the default entrypoint:         \"postCommit\": {         \"args\": [\"rake\", \"test\", \"--verbose\"]        }      This form is only useful if the image entrypoint can handle arguments.  4. Shell script with arguments:         \"postCommit\": {          \"script\": \"rake test $1\",          \"args\":   [\"--verbose\"]        }      This form is useful if you need to pass arguments that would otherwise be     hard to quote properly in the shell script. In the script, $0 will be     \"/bin/sh\" and $1, $2, etc, are the positional arguments from Args.  5. Command with arguments:         \"postCommit\": {          \"command\": [\"rake\", \"test\"],          \"args\":    [\"--verbose\"]        }      This form is equivalent to appending the arguments to the Command slice.  It is invalid to provide both Script and Command simultaneously. If none of the fields are specified, the hook is not executed.")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-10-24T16:19:28.908-04:00")
public class V1BuildPostCommitSpec   {
  @SerializedName("args")
  private List<String> args = new ArrayList<String>();

  @SerializedName("command")
  private List<String> command = new ArrayList<String>();

  @SerializedName("script")
  private String script = null;

  public V1BuildPostCommitSpec args(List<String> args) {
    this.args = args;
    return this;
  }

  public V1BuildPostCommitSpec addArgsItem(String argsItem) {
    this.args.add(argsItem);
    return this;
  }

   /**
   * args is a list of arguments that are provided to either Command, Script or the Docker image's default entrypoint. The arguments are placed immediately after the command to be run.
   * @return args
  **/
  @ApiModelProperty(example = "null", value = "args is a list of arguments that are provided to either Command, Script or the Docker image's default entrypoint. The arguments are placed immediately after the command to be run.")
  public List<String> getArgs() {
    return args;
  }

  public void setArgs(List<String> args) {
    this.args = args;
  }

  public V1BuildPostCommitSpec command(List<String> command) {
    this.command = command;
    return this;
  }

  public V1BuildPostCommitSpec addCommandItem(String commandItem) {
    this.command.add(commandItem);
    return this;
  }

   /**
   * command is the command to run. It may not be specified with Script. This might be needed if the image doesn't have `/bin/sh`, or if you do not want to use a shell. In all other cases, using Script might be more convenient.
   * @return command
  **/
  @ApiModelProperty(example = "null", value = "command is the command to run. It may not be specified with Script. This might be needed if the image doesn't have `/bin/sh`, or if you do not want to use a shell. In all other cases, using Script might be more convenient.")
  public List<String> getCommand() {
    return command;
  }

  public void setCommand(List<String> command) {
    this.command = command;
  }

  public V1BuildPostCommitSpec script(String script) {
    this.script = script;
    return this;
  }

   /**
   * script is a shell script to be run with `/bin/sh -ic`. It may not be specified with Command. Use Script when a shell script is appropriate to execute the post build hook, for example for running unit tests with `rake test`. If you need control over the image entrypoint, or if the image does not have `/bin/sh`, use Command and/or Args. The `-i` flag is needed to support CentOS and RHEL images that use Software Collections (SCL), in order to have the appropriate collections enabled in the shell. E.g., in the Ruby image, this is necessary to make `ruby`, `bundle` and other binaries available in the PATH.
   * @return script
  **/
  @ApiModelProperty(example = "null", value = "script is a shell script to be run with `/bin/sh -ic`. It may not be specified with Command. Use Script when a shell script is appropriate to execute the post build hook, for example for running unit tests with `rake test`. If you need control over the image entrypoint, or if the image does not have `/bin/sh`, use Command and/or Args. The `-i` flag is needed to support CentOS and RHEL images that use Software Collections (SCL), in order to have the appropriate collections enabled in the shell. E.g., in the Ruby image, this is necessary to make `ruby`, `bundle` and other binaries available in the PATH.")
  public String getScript() {
    return script;
  }

  public void setScript(String script) {
    this.script = script;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1BuildPostCommitSpec v1BuildPostCommitSpec = (V1BuildPostCommitSpec) o;
    return Objects.equals(this.args, v1BuildPostCommitSpec.args) &&
        Objects.equals(this.command, v1BuildPostCommitSpec.command) &&
        Objects.equals(this.script, v1BuildPostCommitSpec.script);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, command, script);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1BuildPostCommitSpec {\n");
    
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

